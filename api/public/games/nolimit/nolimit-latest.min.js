(function(f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f()
    } else if (typeof define === "function" && define.amd) {
        define([], f)
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window
        } else if (typeof global !== "undefined") {
            g = global
        } else if (typeof self !== "undefined") {
            g = self
        } else {
            g = this
        }
        g.nolimit = f()
    }
})(function() {
    console.log(window.location.search)
    // const gameName = window.location.search.replace("?","")
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
const gameName = urlParams.get('gameName')
const user = urlParams.get('user')
console.log(gameName)
console.log(user)

    var define, module, exports;
    return (function() {
        function r(e, n, t) {
            function o(i, f) {
                if (!n[i]) {
                    if (!e[i]) {
                        var c = "function" == typeof require && require;
                        if (!f && c) return c(i, !0);
                        if (u) return u(i, !0);
                        var a = new Error("Cannot find module '" + i + "'");
                        throw a.code = "MODULE_NOT_FOUND", a
                    }
                    var p = n[i] = {
                        exports: {}
                    };
                    e[i][0].call(p.exports, function(r) {
                        var n = e[i][1][r];
                        return o(n || r)
                    }, p, p.exports, r, e, n, t)
                }
                return n[i].exports
            }
            for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
            return o
        }
        return r
    })()({
        1: [function(require, module, exports) {
            const info = {
                load: (e, o) => {
                    console.log(e.staticRoot)
                    const s = [e.staticRoot, e.game.replace(/DX[0-9]+$/, "").replace(/[A-Z]{2}$/, "")];
                    e.version && s.push(e.version), s.push("info.json");
                    const t = s.join("/"),
                        n = new XMLHttpRequest;

                    function r() {
                        const e = n.statusText || "No error message available; CORS or server missing?";
                        o({
                            error: e
                        })
                    }
                    n.open("GET", t, !0), n.onload = (() => {
                        if (n.status >= 200 && n.status < 400) try {
                            const s = JSON.parse(n.responseText);
                            s.staticRoot = [e.staticRoot, s.name, s.version].join("/"), s.aspectRatio = s.size.width / s.size.height, s.infoJson = t, o(s)
                        } catch (e) {
                            o({
                                error: e.message
                            })
                        } else r()
                    }), n.onerror = r, n.send()
                }
            };
            module.exports = info;

        }, {}],
        2: [function(require, module, exports) {
            var nolimitApiFactory = function(n, t) {
                var o, e = {},
                    a = {},
                    i = [];

                function r(n) {
                    n.addEventListener("message", function(n) {
                        n.ports && n.ports.length > 0 && ((o = n.ports[0]).onmessage = s, function(n) {
                            for (; i.length > 0;) n.postMessage(i.shift())
                        }(o))
                    }), n.trigger = d, n.on = p, t()
                }

                function s(n) {
                    d(n.data.method, n.data.params)
                }

                function c(n, t) {
                    var e = {
                        jsonrpc: "2.0",
                        method: n
                    };
                    if (t && (e.params = t), o) try {
                        o.postMessage(e)
                    } catch (n) {
                        o = void 0, i.push(e)
                    } else i.push(e)
                }

                function d(n, t) {
                    e[n] ? e[n].forEach(function(n) {
                        n(t)
                    }) : (a[name] = a[name] || [], a[name].push(t))
                }

                function p(n, t) {
                    for (e[n] = e[n] || [], e[n].push(t); a[n] && a[n].length > 0;) d(n, a[n].pop());
                    c("register", [n])
                }
                return "IFRAME" === n.nodeName ? n.contentWindow && n.contentWindow.document && "complete" === n.contentWindow.document.readyState ? r(n.contentWindow) : n.addEventListener("load", function() {
                    r(n.contentWindow)
                }) : r(n), {
                    on: p,
                    call: c,
                    trigger: d
                }
            };
            module.exports = nolimitApiFactory;

        }, {}],
        3: [function(require, module, exports) {
            module.exports = "html, body {\n    overflow: hidden;\n    margin: 0;\n    width: 100%;\n    height: 100%;\n}\n\nbody {\n    position: relative;\n}\n";

        }, {}],
        4: [function(require, module, exports) {
            var nolimitApiFactory = require("./nolimit-api"),
                info = require("./info"),
                CDN = "https://{ENV}",
                LOADER_URL = "{CDN}/loader/loader-{DEVICE}.html?operator={OPERATOR}&game={GAME}&language={LANGUAGE}",
                REPLACE_URL = "{CDN}/loader/game-loader.html?{QUERY}",
                GAMES_URL = "{CDN}/games",
                DEFAULT_OPTIONS = {
                    device: "desktop",
                    environment: "partner",
                    language: "en",
                    "nolimit.js": "1.2.85"
                },
                nolimit = {
                    version: "1.2.85",
                    options: {},
                    init: function(e) {
                        this.options = e
                    },
                    load: function(e) {
                        var t = (e = processOptions(mergeOptions(this.options, e))).target || window;
                        if (t.Window && t instanceof t.Window && ((t = document.createElement("div")).setAttribute("style", "position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden;"), document.body.appendChild(t)), t.ownerDocument && t instanceof t.ownerDocument.defaultView.HTMLElement) {
                            var n = makeIframe(t);
                            console.log(window.supabase)
                            n.supabase = window.supabase
                            return t.parentNode.replaceChild(n, t), nolimitApiFactory(n, function() {
                                html(n.contentWindow, e)
                            })
                        }
                        throw "Invalid option target: " + t
                    },
                    replace: function(e) {
                        function t() {}
                        return location.href = this.url(e), {
                            on: t,
                            call: t
                        }
                    },
                    url: function(e) {
                        var t = processOptions(mergeOptions(this.options, e));
                        return REPLACE_URL.replace("{CDN}", t.cdn).replace("{QUERY}", makeQueryString(t))
                    },
                    info: function(e, t) {
                        e = processOptions(mergeOptions(this.options, e)), info.load(e, t)
                    }
                };

            function makeQueryString(e) {
                var t = [];
                for (var n in e) {
                    var o = e[n];
                    void 0 !== o && (o instanceof HTMLElement || ("object" == typeof o && (o = JSON.stringify(o)), t.push(encodeURIComponent(n) + "=" + encodeURIComponent(o))))
                }
                return t.join("&")
            }

            function makeIframe(e) {
                var t = document.createElement("iframe");
                copyAttributes(e, t), t.setAttribute("frameBorder", "0"), t.setAttribute("allow", "autoplay"), t.setAttribute("sandbox", "allow-forms allow-scripts allow-same-origin allow-top-navigation allow-popups");
                var n = generateName(t.getAttribute("name") || t.id);
                return t.setAttribute("name", n), t
            }

            function mergeOptions(e, t) {
                delete e.version, delete e.replay, delete e.token;
                var n, o = {};
                for (n in DEFAULT_OPTIONS) o[n] = DEFAULT_OPTIONS[n];
                for (n in e) o[n] = e[n];
                for (n in t) o[n] = t[n];
                return o
            }

            function insertCss(e) {
                var t = e.createElement("style");
                e.head.appendChild(t), t.appendChild(e.createTextNode(require("./nolimit.css")))
            }

            function setupViewport(e) {
                e.querySelector('meta[name="viewport"]') || e.insertAdjacentHTML("beforeend", '<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">')
            }

            function processOptions(e) {
                e.device = e.device.toLowerCase(), e.mute = e.mute || !1;
                var t = e.environment.toLowerCase();
                console.log(e.staticRoot)
                e.staticRoot = '/games/nolimit'
                return -1 === t.indexOf(".") && (t += ".nolimitcdn.com"), e.cdn = e.cdn || CDN.replace("{ENV}", t), e.staticRoot = e.staticRoot || GAMES_URL.replace("{CDN}", e.cdn), e.playForFunCurrency = e.playForFunCurrency || e.currency, "pe" !== e.language && "cl" !== e.language || (e.language = "es"), e
            }

            function html(e, t) {
                var n = e.document;
                e.focus(), insertCss(n), setupViewport(n.head);
                var o = n.createElement("iframe");
                o.setAttribute("frameBorder", "0"), o.style.backgroundColor = "black", o.style.width = "100vw", o.style.height = "100vh", o.style.position = "relative", o.style.zIndex = "2147483647", o.classList.add("loader"), o.src = LOADER_URL.replace("{CDN}", t.cdn).replace("{DEVICE}", t.device).replace("{OPERATOR}", t.operator).replace("{GAME}", t.game).replace("{LANGUAGE}", t.language), n.body.innerHTML = "", o.onload = function() {
                    e.on("error", function(e) {
                        o && o.contentWindow && o.contentWindow.postMessage(JSON.stringify({
                            error: e
                        }), "*")
                    }), nolimit.info(t, function(i) {
                        if (i.error) e.trigger("error", i.error), o.contentWindow.postMessage(JSON.stringify(i), "*");
                        else {
                            //https://demo.nolimitcdn.com/games/SanQuentin/1.2.39
                            e.trigger("info", i);
                            var r = n.createElement("script");
                            if(gameName === 'FireInTheHole2')
                            i.staticRoot = `/nolimit/${gameName}/1.0.146`
                                if(gameName === 'SanQuentin')
                            i.staticRoot = `/nolimit/${gameName}`
                                 if(gameName === 'LandOfTheFree')
                            i.staticRoot = `/nolimit/${gameName}/1.0.157`
                                  if(gameName === 'TheCrypt')
                            i.staticRoot = `/nolimit/${gameName}/1.0.201`
                                if (gameName === 'GaelicGold')
                        i.staticRoot = `/nolimit/${gameName}/1.4.8`
                            console.log('loading game.js from local ',i.staticRoot )
                            console.log('t ',i)
                            r.src = i.staticRoot + "/game.js", t.loadStart = Date.now(), e.nolimit = nolimit, e.nolimit.options = t, e.nolimit.options.version = i.version, e.nolimit.options.info = i, n.body.appendChild(r)
                        }
                    }), o.onload = function() {}
                }, n.body.appendChild(o)
            }

            function copyAttributes(e, t) {
                for (var n = e.attributes, o = 0; o < n.length; o++) {
                    var i = n[o];
                    t.setAttribute(i.name, i.value)
                }
            }
            var generateName = function() {
                var e = 1;
                return function(t) {
                    return t || "Nolimit-" + e++
                }
            }();
            module.exports = nolimit;

        }, {
            "./info": 1,
            "./nolimit-api": 2,
            "./nolimit.css": 3
        }]
    }, {}, [4])(4)
});
//# sourceMappingURL=nolimit-1.2.85.min.js.map

// // Patch WebSocket globally to redirect game connections.

// const { aL } = require("vitest/dist/chunks/reporters.d.BFLkQcL6.js");

// // Keep a reference to the native implementation.
// window.NOLIMIT_WS_DEBUG = true;

//   (function websocketPatch() {
//     if (typeof window === "undefined") return;
//     if (window.__NL_WS_PATCHED__) return; // idempotent
//     window.__NL_WS_PATCHED__ = true;

//     const NativeWebSocket = window.WebSocket;
//     if (!NativeWebSocket) return;

//     // Configure how you want to rewrite target URLs.
//     // Example strategies:
//     // 1) Force host/port
//     // 2) Replace path prefix
//     // 3) Full override for known vendors
//     function rewriteWsUrl(inputUrl) {
//       try {
//         // Accept relative or absolute
//         const u = new URL(inputUrl, window.location.href);

//         // Example: redirect all ws(s) to your backend aggregator
//         // Change these to your target host/port and scheme.
//         // auto-upgrade to wss if current page is https:
//         const isSecurePage = window.location.protocol === "https:";
//         const targetProtocol = isSecurePage ? "wss:" : "ws:";

//         // Example: keep the path but switch host/port
//         //   const targetHost = window.NOLIMIT_WS_HOST || window.location.hostname;
//         const targetHost = window.location.hostname;
//         const targetPort = 3001 // window.NOLIMIT_WS_PORT || (isSecurePage ? "443" : "80");

//         u.protocol = targetProtocol;
//         u.hostname = targetHost;
//         u.port = targetPort;

//         // Optionally normalize or prefix the path. For example, if the vendor uses
//         // /socket or /ws, you can route everything under /nolimit-ws:
//         if (window.NOLIMIT_WS_PREFIX) {
//           // Ensure single slash joining:
//           const p = u.pathname.startsWith("/") ? u.pathname : "/" + u.pathname;
//           const prefix = window.NOLIMIT_WS_PREFIX.endsWith("/")
//             ? window.NOLIMIT_WS_PREFIX.slice(0, -1)
//             : window.NOLIMIT_WS_PREFIX;
//           u.pathname = prefix + p;
//         }

//         // Optional: attach token or metadata
//         if (window.NOLIMIT_WS_TOKEN) {
//           u.searchParams.set("token", window.NOLIMIT_WS_TOKEN);
//         }

//         return u.toString();
//       } catch (_e) {
//         // If parsing fails, fallback to input
//         return inputUrl;
//       }
//     }

//     // Proxy class that mimics native WebSocket
//     class PatchedWebSocket {
//       constructor(url, protocols) {
//         const rewritten = rewriteWsUrl(url);

//         // Support both (url) and (url, protocols)
//         const ws = protocols !== undefined
//           ? new NativeWebSocket(rewritten, protocols)
//           : new NativeWebSocket(rewritten);

//         // Keep a back-reference in case you need the original
//         Object.defineProperty(this, "__native_ws", {
//           value: ws,
//           enumerable: false,
//           configurable: false,
//           writable: false,
//         });

//         // Mirror standard readonly properties via getters
//         const readonlyProps = [
//           "url",
//           "readyState",
//           "bufferedAmount",
//           "extensions",
//           "protocol",
//           "binaryType",
//         ];

//         readonlyProps.forEach((prop) => {
//           Object.defineProperty(this, prop, {
//             get: () => ws[prop],
//             set: (v) => {
//               // Allow binaryType to be set
//               if (prop === "binaryType") ws[prop] = v;
//             },
//             enumerable: true,
//           });
//         });

//         // Forward the core methods
//         this.send = ws.send.bind(ws);
//         this.close = ws.close.bind(ws);

//         // Event handler properties
//         const handlerProps = ["onopen", "onmessage", "onerror", "onclose"];
//         handlerProps.forEach((h) => {
//           Object.defineProperty(this, h, {
//             get: () => ws[h],
//             set: (fn) => { ws[h] = fn; },
//             enumerable: true,
//           });
//         });

//         // EventTarget methods
//         this.addEventListener = ws.addEventListener.bind(ws);
//         this.removeEventListener = ws.removeEventListener.bind(ws);
//         this.dispatchEvent = ws.dispatchEvent.bind(ws);

//         // Optional debug
//         if (window.NOLIMIT_WS_DEBUG) {
//           console.log("[WS Patch] url:", url, "=>", rewritten, "protocols:", protocols);
//           ws.addEventListener("open", (e) => console.log("[WS Patch] open", ws.url, e));
//           ws.addEventListener("message", (e) => {
//             // Be careful with large payloads
//             console.log("[WS Patch] message", ws.url, e && (e.data?.slice?.(0, 128) || e.data));
//           });
//           ws.addEventListener("error", (e) => console.warn("[WS Patch] error", ws.url, e));
//           ws.addEventListener("close", (e) => console.log("[WS Patch] close", ws.url, e));
//         }
//       }

//       // ReadyState constants on the constructor per WebSocket spec
//       static get CONNECTING() { return NativeWebSocket.CONNECTING; }
//       static get OPEN() { return NativeWebSocket.OPEN; }
//       static get CLOSING() { return NativeWebSocket.CLOSING; }
//       static get CLOSED() { return NativeWebSocket.CLOSED; }
//     }

//     // Also copy constants on instance constructor to match usage like ws.OPEN
//     Object.defineProperties(PatchedWebSocket.prototype, {
//       CONNECTING: { get: () => NativeWebSocket.CONNECTING },
//       OPEN: { get: () => NativeWebSocket.OPEN },
//       CLOSING: { get: () => NativeWebSocket.CLOSING },
//       CLOSED: { get: () => NativeWebSocket.CLOSED },
//     });

//     // Replace global
//     window.WebSocket = PatchedWebSocket;
//   })();


// (function (f) {
//   if (typeof exports === "object" && typeof module !== "undefined") {
//     module.exports = f();
//   } else if (typeof define === "function" && define.amd) {
//     define([], f);
//   } else {
//     var g;
//     if (typeof window !== "undefined") {
//       g = window;
//     } else if (typeof global !== "undefined") {
//       g = global;
//     } else if (typeof self !== "undefined") {
//       g = self;
//     } else {
//       g = this;
//     }
//     g.nolimit = f();
//   }
// })(function () {
//   console.log(window.location.search);
     

//   // const gameName = window.location.search.replace("?","")
//   const queryString = window.location.search;
//   const urlParams = new URLSearchParams(queryString);
//   const gameName = urlParams.get("gameName");
//   const user = urlParams.get("user");
//   console.log(gameName);
//   console.log(user);

//   var define, module, exports;
//   return (function () {
//     function r(e, n, t) {
//       function o(i, f) {
//         if (!n[i]) {
//           if (!e[i]) {
//             var c = "function" == typeof require && require;
//             if (!f && c) return c(i, !0);
//             if (u) return u(i, !0);
//             var a = new Error("Cannot find module '" + i + "'");
//             throw ((a.code = "MODULE_NOT_FOUND"), a);
//           }
//           var p = (n[i] = {
//             exports: {},
//           });
//           e[i][0].call(
//             p.exports,
//             function (r) {
//               var n = e[i][1][r];
//               return o(n || r);
//             },
//             p,
//             p.exports,
//             r,
//             e,
//             n,
//             t,
//           );
//         }
//         return n[i].exports;
//       }
//       for (
//         var u = "function" == typeof require && require, i = 0;
//         i < t.length;
//         i++
//       )
//         o(t[i]);
//       return o;
//     }
//     return r;
//   })()(
//     {
//       1: [
//         function (require, module, exports) {
//           const info = {
//             load: (e, o) => {
//               console.log(e.staticRoot);
//               const s = [
//                 e.staticRoot,
//                 e.game.replace(/DX[0-9]+$/, "").replace(/[A-Z]{2}$/, ""),
//               ];
//               (e.version && s.push(e.version), s.push("info.json"));
//               const t = s.join("/"),
//                 n = new XMLHttpRequest();

//               function r() {
//                 const e =
//                   n.statusText ||
//                   "No error message available; CORS or server missing?";
//                 o({
//                   error: e,
//                 });
//               }
//               (n.open("GET", t, !0),
//                 (n.onload = () => {
//                   if (n.status >= 200 && n.status < 400)
//                     try {
//                       const s = JSON.parse(n.responseText);
//                       ((s.staticRoot = [e.staticRoot, s.name, s.version].join(
//                         "/",
//                       )),
//                         (s.aspectRatio = s.size.width / s.size.height),
//                         (s.infoJson = t),
//                         o(s));
//                     } catch (e) {
//                       o({
//                         error: e.message,
//                       });
//                     }
//                   else r();
//                 }),
//                 (n.onerror = r),
//                 n.send());
//             },
//           };
//           module.exports = info;
//         },
//         {},
//       ],
//       2: [
//         function (require, module, exports) {
//           var nolimitApiFactory = function (n, t) {
//             var o,
//               e = {},
//               a = {},
//               i = [];

//             function r(n) {
//               (n.addEventListener("message", function (n) {
//                 n.ports &&
//                   n.ports.length > 0 &&
//                   (((o = n.ports[0]).onmessage = s),
//                     (function (n) {
//                       for (; i.length > 0;) n.postMessage(i.shift());
//                     })(o));
//               }),
//                 (n.trigger = d),
//                 (n.on = p),
//                 t());
//             }

//             function s(n) {
//               d(n.data.method, n.data.params);
//             }

//             function c(n, t) {
//               var e = {
//                 jsonrpc: "2.0",
//                 method: n,
//               };
//               if ((t && (e.params = t), o))
//                 try {
//                   o.postMessage(e);
//                 } catch (n) {
//                   ((o = void 0), i.push(e));
//                 }
//               else i.push(e);
//             }

//             function d(n, t) {
//               e[n]
//                 ? e[n].forEach(function (n) {
//                   n(t);
//                 })
//                 : ((a[name] = a[name] || []), a[name].push(t));
//             }

//             function p(n, t) {
//               for (e[n] = e[n] || [], e[n].push(t); a[n] && a[n].length > 0;)
//                 d(n, a[n].pop());
//               c("register", [n]);
//             }
//             return (
//               "IFRAME" === n.nodeName
//                 ? n.contentWindow &&
//                   n.contentWindow.document &&
//                   "complete" === n.contentWindow.document.readyState
//                   ? r(n.contentWindow)
//                   : n.addEventListener("load", function () {
//                     r(n.contentWindow);
//                   })
//                 : r(n),
//               {
//                 on: p,
//                 call: c,
//                 trigger: d,
//               }
//             );
//           };
//           module.exports = nolimitApiFactory;
//         },
//         {},
//       ],
//       3: [
//         function (require, module, exports) {
//           module.exports =
//             "html, body {\n    overflow: hidden;\n    margin: 0;\n    width: 100%;\n    height: 100%;\n}\n\nbody {\n    position: relative;\n}\n";
//         },
//         {},
//       ],
//       4: [
//         function (require, module, exports) {
//                alert(nolimit)
//           var nolimitApiFactory = require("./nolimit-api"),
//             info = require("./info"),
//             CDN = "https://{ENV}",
//             LOADER_URL =
//               "{CDN}/loader/loader-{DEVICE}.html?operator={OPERATOR}&game={GAME}&language={LANGUAGE}",
//             REPLACE_URL = "{CDN}/loader/game-loader.html?{QUERY}",
//             GAMES_URL = "{CDN}/games",
//             DEFAULT_OPTIONS = {
//               device: "desktop",
//               environment: "partner",
//               language: "en",
//               "nolimit.js": "1.2.85",
//             },
//             nolimit = {
//               version: "1.2.85",
//               options: {},
//               init: function (e) {
//                 this.options = e;
//               },
//               load: function (e) {
//                 var t =
//                   (e = processOptions(mergeOptions(this.options, e))).target ||
//                   window;
//                 if (
//                   (t.Window &&
//                     t instanceof t.Window &&
//                     ((t = document.createElement("div")).setAttribute(
//                       "style",
//                       "position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden;",
//                     ),
//                       document.body.appendChild(t)),
//                     t.ownerDocument &&
//                     t instanceof t.ownerDocument.defaultView.HTMLElement)
//                 ) {
//                   var n = makeIframe(t);
//                   console.log(window.supabase);
//                   n.supabase = window.supabase;
//                   return (
//                     t.parentNode.replaceChild(n, t),
//                     nolimitApiFactory(n, function () {
//                       html(n.contentWindow, e);
//                     })
//                   );
//                 }
//                 throw "Invalid option target: " + t;
//               },
//               replace: function (e) {
//                 function t() { }
//                 return (
//                   (location.href = this.url(e)),
//                   {
//                     on: t,
//                     call: t,
//                   }
//                 );
//               },
//               url: function (e) {
//                 var t = processOptions(mergeOptions(this.options, e));
//                 return REPLACE_URL.replace("{CDN}", t.cdn).replace(
//                   "{QUERY}",
//                   makeQueryString(t),
//                 );
//               },
//               info: function (e, t) {
//                 ((e = processOptions(mergeOptions(this.options, e))),
//                   info.load(e, t));
//               },
//             };

//           function makeQueryString(e) {
//             var t = [];
//             for (var n in e) {
//               var o = e[n];
//               void 0 !== o &&
//                 (o instanceof HTMLElement ||
//                   ("object" == typeof o && (o = JSON.stringify(o)),
//                     t.push(encodeURIComponent(n) + "=" + encodeURIComponent(o))));
//             }
//             return t.join("&");
//           }

//           function makeIframe(e) {
//             var t = document.createElement("iframe");
//             (copyAttributes(e, t),
//               t.setAttribute("frameBorder", "0"),
//               t.setAttribute("allow", "autoplay"),
//               t.setAttribute(
//                 "sandbox",
//                 "allow-forms allow-scripts allow-same-origin allow-top-navigation allow-popups",
//               ));
//             var n = generateName(t.getAttribute("name") || t.id);
//             return (t.setAttribute("name", n), t);
//           }

//           function mergeOptions(e, t) {
//             (delete e.version, delete e.replay, delete e.token);
//             var n,
//               o = {};
//             for (n in DEFAULT_OPTIONS) o[n] = DEFAULT_OPTIONS[n];
//             for (n in e) o[n] = e[n];
//             for (n in t) o[n] = t[n];
//             return o;
//           }

//           function insertCss(e) {
//             var t = e.createElement("style");
//             (e.head.appendChild(t),
//               t.appendChild(e.createTextNode(require("./nolimit.css"))));
//           }

//           function setupViewport(e) {
//             e.querySelector('meta[name="viewport"]') ||
//               e.insertAdjacentHTML(
//                 "beforeend",
//                 '<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">',
//               );
//           }

//           function processOptions(e) {
//             ((e.device = e.device.toLowerCase()), (e.mute = e.mute || !1));
//             var t = e.environment.toLowerCase();
//             console.log(e.staticRoot);
//             e.staticRoot = "/games/nolimit";
//             return (
//               -1 === t.indexOf(".") && (t += ".nolimitcdn.com"),
//               (e.cdn = e.cdn || CDN.replace("{ENV}", t)),
//               (e.staticRoot =
//                 e.staticRoot || GAMES_URL.replace("{CDN}", e.cdn)),
//               (e.playForFunCurrency = e.playForFunCurrency || e.currency),
//               ("pe" !== e.language && "cl" !== e.language) ||
//               (e.language = "es"),
//               e
//             );
//           }

//           function html(e, t) {
//             var n = e.document;
//             (e.focus(), insertCss(n), setupViewport(n.head));
//             var o = n.createElement("iframe");
//             (o.setAttribute("frameBorder", "0"),
//               (o.style.backgroundColor = "black"),
//               (o.style.width = "100vw"),
//               (o.style.height = "100vh"),
//               (o.style.position = "relative"),
//               (o.style.zIndex = "2147483647"),
//               o.classList.add("loader"),
//               (o.src = LOADER_URL.replace("{CDN}", t.cdn)
//                 .replace("{DEVICE}", t.device)
//                 .replace("{OPERATOR}", t.operator)
//                 .replace("{GAME}", t.game)
//                 .replace("{LANGUAGE}", t.language)),
//               (n.body.innerHTML = ""),
//               (o.onload = function () {
//                 (e.on("error", function (e) {
//                   o &&
//                     o.contentWindow &&
//                     o.contentWindow.postMessage(
//                       JSON.stringify({
//                         error: e,
//                       }),
//                       "*",
//                     );
//                 }),
//                   nolimit.info(t, function (i) {
//                     if (i.error)
//                       (e.trigger("error", i.error),
//                         o.contentWindow.postMessage(JSON.stringify(i), "*"));
//                     else {
//                       //https://demo.nolimitcdn.com/games/SanQuentin/1.2.39
//                       e.trigger("info", i);
//                       var r = n.createElement("script");
//                       console.log(i.staticRoot)r
//                       if (gameName === "FireInTheHole2")
//                         i.staticRoot = `/games/nolimit/${gameName}/1.0.146`;
//                       if (gameName === "SanQuentin")
//                         i.staticRoot = `/games/nolimit/${gameName}`;
//                       if (gameName === "LandOfTheFree")
//                         i.staticRoot = `/games/nolimit/${gameName}/1.0.157`;
//                       if (gameName === "TheCrypt")
//                         i.staticRoot = `/games/nolimit/${gameName}/1.0.201`;
//                       if (gameName === "GaelicGold")
//                         i.staticRoot = `/games/nolimit/${gameName}/1.4.8`;
//                       console.log("loading game.js from local ", i.staticRoot);
//                       console.log("t ", i);
//                       ((r.src = i.staticRoot + "/game.js"),
//                         (t.loadStart = Date.now()),
//                         (e.nolimit = nolimit),
//                         (e.nolimit.options = t),
//                         (e.nolimit.options.version = i.version),
//                         (e.nolimit.options.info = i),
//                         n.body.appendChild(r));
//                     }
//                   }),
//                   (o.onload = function () { }));
//               }),
//               n.body.appendChild(o));
//           }

//           function copyAttributes(e, t) {
//             for (var n = e.attributes, o = 0; o < n.length; o++) {
//               var i = n[o];
//               t.setAttribute(i.name, i.value);
//             }
//           }
//           var generateName = (function () {
//             var e = 1;
//             return function (t) {
//               return t || "Nolimit-" + e++;
//             };
//           })();
//           module.exports = nolimit;
//           window.nolimit = nolimit
//           alert(nolimit)
//         },
//         {
//           "./info": 1,
//           "./nolimit-api": 2,
//           "./nolimit.css": 3,
//         },
//       ],
//     },
//     {},
//     [4],
//   )(4);
// });
// //# sourceMappingURL=nolimit-1.2.85.min.js.map
