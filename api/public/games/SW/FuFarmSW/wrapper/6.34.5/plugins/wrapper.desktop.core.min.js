(window.webpackJsonp1587739345018 = window.webpackJsonp1587739345018 || []).push([[9], {
    100: function(e, t, i) {},
    103: function(e, t, i) {
        "use strict";
        i.d(t, "a", (function() {
            return s
        }
        ));
        const s = (e,t)=>{
            e.textContent !== t && (e.textContent = t)
        }
    },
    119: function(e, t, i) {
        "use strict";
        i.d(t, "a", (function() {
            return r
        }
        ));
        var s = i(3)
          , n = i(0)
          , a = i(8);
        const o = (e,t)=>Object.assign(Object.assign({}, t), e);
        let r = class {
            constructor() {
                this.dispatcher = Object(n.d)(a.a),
                this.data = {},
                this.subscriptions = {}
            }
            isEnabledFor(e) {
                return !!this.subscriptions[e]
            }
            enableFor(e, t=o) {
                if (this.isEnabledFor(e))
                    return;
                const i = i=>{
                    this.data[e] = t(i, this.data[e])
                }
                ;
                this.dispatcher.on(e, i),
                this.subscriptions[e] = ()=>this.dispatcher.off(e, i)
            }
            disableFor(e) {
                this.isEnabledFor(e) && (this.subscriptions[e](),
                this.subscriptions[e] = null)
            }
            getData(e) {
                return this.data[e]
            }
            pull(e) {
                const t = this.getData(e);
                return this.data[e] = null,
                this.disableFor(e),
                t
            }
        }
        ;
        r = Object(s.a)([n.a], r)
    },
    123: function(e, t, i) {
        "use strict";
        var s = i(3)
          , n = i(16)
          , a = (i(5),
        i(102))
          , o = i(0)
          , r = i(85);
        var h = i(8);
        i.d(t, "a", (function() {
            return d
        }
        ));
        let d = class {
            constructor() {
                this.splash = Object(o.d)(n.a),
                this.device = Object(o.d)(r.a),
                this.dispatcher = Object(o.d)(h.a),
                this.isIOS = this.device.deviceOS === a.b.IOS,
                this.enterFullScreen = ()=>{}
                ,
                this.exitFullscreen = ()=>{}
            }
            initialize() {
                this.device.isAllowFullScreen() && (this.force = this.getForceType(),
                this.strategy = ((e,t)=>{
                    const {NativeFullScreen: s} = i(170);
                    return new s
                }
                )(this.isIOS, this.force),
                this.enterFullScreen = ()=>{
                    this.strategy.enter()
                }
                ,
                this.exitFullscreen = ()=>{
                    this.strategy.exit()
                }
                ,
                this.addListeners())
            }
            getForceType() {
                return null
            }
            addListeners() {
                this.dispatcher.on("FULLSCREEN_EXIT", this.exitFullscreen, this),
                this.performAfterSplash(this.emitFullScreenData),
                this.strategy.onChange(()=>this.emitFullScreenData())
            }
            async performAfterSplash(e) {
                this.splash.isComplete || await this.dispatcher.promisifiedOnce("SPLASH_COMPLETE"),
                e.call(this)
            }
            get isFullscreen() {
                var e;
                return null === (e = this.strategy) || void 0 === e ? void 0 : e.isFullscreen
            }
            emitFullScreenData() {
                this.dispatcher.emit("FULLSCREEN_CHANGE", this.isFullscreen)
            }
        }
        ;
        d = Object(s.a)([o.a], d)
    },
    130: function(e, t, i) {
        "use strict";
        i.r(t),
        i.d(t, "FullscreenButton", (function() {
            return n
        }
        ));
        i(168);
        var s = i(89);
        class n extends s.a {
            addListeners() {
                super.addListeners(),
                this.options.configurable && this.dispatcher.on("UPDATE_UI_ELEMENT_FS_BUTTON", this.updateOptions)
            }
            removeListeners() {
                super.removeListeners(),
                this.options.configurable && this.dispatcher.off("UPDATE_UI_ELEMENT_FS_BUTTON", this.updateOptions)
            }
            getTemplate() {
                return i(169)
            }
        }
    },
    131: function(e, t, i) {
        "use strict";
        i.r(t),
        i.d(t, "FullScreenButtonMediator", (function() {
            return u
        }
        ));
        var s = i(3)
          , n = i(14)
          , a = i(0)
          , o = i(13)
          , r = i(12)
          , h = i(90)
          , d = i(85)
          , l = i(8)
          , c = i(123);
        let u = class {
            constructor() {
                this.device = Object(a.d)(d.a),
                this.serverModel = Object(a.d)(h.a),
                this.wrapperModel = Object(a.d)(o.a),
                this.dispatcher = Object(a.d)(l.a),
                this.fullScreenManager = Object(a.d)(c.a),
                this.isPressed = !1,
                this.preventOnResizeListener = !1
            }
            initialize(e) {
                this.button = e;
                const {isQQ: t, isUC: i} = this.device.browser;
                this.isSpecialBrowser = t || i,
                this.addListeners(),
                this.device.isIframe || (this.isPressed = this.isFullScreen(),
                Object(r.a)(this.button.element, this.isPressed))
            }
            addListeners() {
                this.button.element.addEventListener(this.device.event.click, this.onClick),
                addEventListener("resize", ()=>this.windowOnResize()),
                addEventListener("beforeunload", ()=>this.onBeforeUnload())
            }
            onBeforeUnload() {
                this.fullScreenManager.isFullscreen && this.fullScreenManager.exitFullscreen()
            }
            onClick(e) {
                e.preventDefault(),
                this.preventOnResizeListener = !0,
                this.isSpecialBrowser ? function() {
                    const e = document.documentElement;
                    document.webkitExitFullscreen && document.webkitFullscreenElement ? document.webkitExitFullscreen() : e.webkitRequestFullscreen && e.webkitRequestFullscreen()
                }() : this.isPressed && this.fullScreenManager.isFullscreen ? this.fullScreenManager.exitFullscreen() : this.fullScreenManager.enterFullScreen(),
                this.isPressed = !this.isPressed,
                Object(r.a)(this.button.element, this.isPressed),
                setTimeout(()=>this.preventOnResizeListener = !1, 200)
            }
            windowOnResize() {
                this.preventOnResizeListener || setTimeout(()=>this.updateButtonState(), 200)
            }
            updateButtonState() {
                this.isPressed = this.device.isIframe ? this.fullScreenManager.isFullscreen : this.isFullScreen(),
                Object(r.a)(this.button.element, this.isPressed)
            }
            isFullScreen() {
                return this.device.browser.isFirefox ? screen.height - window.innerHeight <= 2 : screen.height === window.innerHeight
            }
            async isFullscreenButtonAvailable() {
                var e, t;
                return !!this.device.isAllowFullScreen() && (this.wrapperModel.liveGame || await this.dispatcher.promisifiedOnce("INIT_RESPONSE_RECEIVED"),
                this.wrapperModel.fsButtonVisible && !1 !== (null === (t = null === (e = this.serverModel.initResponse) || void 0 === e ? void 0 : e.brandSettings) || void 0 === t ? void 0 : t.fullscreen))
            }
        }
        ;
        Object(s.a)([n.a], u.prototype, "onClick", null),
        u = Object(s.a)([a.a], u)
    },
    135: function(e, t, i) {
        "use strict";
        var s = i(3)
          , n = (i(159),
        i(0))
          , a = i(6)
          , o = i(9)
          , r = i(14)
          , h = i(87)
          , d = (i(1),
        i(8))
          , l = i(91);
        let c = class extends o.EventEmitter {
            constructor() {
                super(),
                this.isMenuVisible = !1,
                this.dispatcher = Object(n.d)(d.a),
                this.gameDetector = Object(n.d)(l.a),
                this.isSidebar = Object(n.d)(h.a).isSidebar,
                this.isEnabled = !this.isSidebar,
                this.options = {
                    visible: this.isEnabled
                },
                this.addListeners(),
                this.startClock()
            }
            get isVisible() {
                return this.isMenuVisible && this.options.visible
            }
            addListeners() {
                this.isSidebar && this.dispatcher.once("INIT_RESPONSE_RECEIVED", this.onInitResponse, this).once("MENU_WAS_DISPLAYED", this.onMenuDisplayed, this).once("SET_CLOCK_VISIBILITY", this.setVisibility, this).on("MENU_SET_OPTIONS", this.onSetMenuOptions, this).on("UPDATE_UI_ELEMENT_CLOCK", this.update, this)
            }
            onInitResponse({jrsdSettings: e}) {
                if (!this.gameDetector.isMark5)
                    return;
                const {showClockOnMobile: t=!1} = e || {};
                this.isEnabled = t || !1,
                this.setVisibility(this.isEnabled)
            }
            onMenuDisplayed() {
                this.isMenuVisible = !0,
                this.update()
            }
            onSetMenuOptions({clockOptions: e}) {
                if (!this.isEnabled || !e)
                    return;
                const {clockBounds: t, style: i, disabled: s, show: n} = e
                  , a = {};
                void 0 !== n && (a.visible = n),
                void 0 !== s && (a.visible = !s),
                i && (a.style = i),
                t && (a.bounds = t),
                this.update(a)
            }
            setVisibility(e) {
                void 0 !== e && e !== this.options.visible && this.update({
                    visible: e
                })
            }
            startClock() {
                const e = new Date
                  , t = e.getHours()
                  , i = e.getMinutes()
                  , s = 60 - e.getSeconds();
                this.time = Object(a.c)(t, i),
                this.emit("Clock.UPDATE_TIME", this.time),
                setTimeout(this.startClock, 1e3 * s + 500)
            }
            update(e) {
                e && (this.options = Object.assign(Object.assign({}, this.options), e)),
                this.isMenuVisible && this.emit("Clock.OPTIONS", this.options)
            }
        }
        ;
        Object(s.a)([r.a], c.prototype, "startClock", null),
        c = Object(s.a)([n.a], c);
        var u = i(89)
          , p = i(103);
        i.d(t, "a", (function() {
            return m
        }
        ));
        class m extends u.a {
            constructor() {
                super(...arguments),
                this.model = Object(n.d)(c)
            }
            addListeners() {
                super.addListeners(),
                this.model.on("Clock.UPDATE_TIME", this.updateValue),
                this.options.configurable && this.model.on("Clock.OPTIONS", this.updateOptions)
            }
            removeListeners() {
                super.removeListeners(),
                this.model.off("Clock.UPDATE_TIME", this.updateValue),
                this.options.configurable && this.model.on("Clock.OPTIONS", this.updateOptions)
            }
            render() {
                return super.render(),
                this.updateValue(this.model.time),
                this.options.configurable && (this.visible = this.model.isVisible),
                this.el
            }
            updateValue(e) {
                Object(p.a)(this.el, e)
            }
            getTemplate() {
                return i(160)
            }
        }
        Object(s.a)([r.a], m.prototype, "updateValue", null)
    },
    153: function(e, t, i) {},
    154: function(e, t, i) {
        
    },
    159: function(e, t, i) {},
    160: function(e, t) {
        e.exports = function(e) {
            var t = "<div ";
            return e.cssClass && (t += 'class="' + e.cssClass + '"'),
            t += "></div>"
        }
    },
    161: function(e, t, i) {},
    162: function(e, t, i) {},
    163: function(e, t) {
        e.exports = function(e) {
            return '<div class="nav-btn nav-btn-menu hidden"></div>'
        }
    },
    164: function(e, t) {
        e.exports = function(e) {
            return '<div class="wrapper-menu sidebar-menu hidden"> <div class="menu-overlay hidden"></div> <div class="menu-holder hidden"> <div class="menu-list-container touch-disabled"> ' + e.sidebar + " </div> </div></div>"
        }
    },
    165: function(e, t) {
        e.exports = function(e) {
            var t = "";
            function i(e) {
                return '<span class="menu-label' + (e.indexOf("<br>") > -1 ? " two-lines" : "") + '">' + e + "</span>"
            }
            t += '<ul class="menu-list">';
            var s = e;
            if (s)
                for (var n, a = -1, o = s.length - 1; a < o; )
                    if (t += " ",
                    "link" == (n = s[a += 1]).type)
                        t += ' <li class="menu-list-item menu-list-item-' + n.id + '"> <a href="' + (n.href || "#") + '" ',
                        n.newTab && (t += 'target="_blank" '),
                        t += ' class="menu-list-link menu-' + n.id + " ",
                        n.href || (t += "disabled"),
                        t += '" data-id="' + n.id + '">  ',
                        n.iconTemplate ? t += " " + n.iconTemplate() + " " : t += ' <span class="menu-icon"></span> ',
                        t += ' <span class="menu-label">' + n.label + "</span> </a></li> ";
                    else if ("switch" == n.type) {
                        t += " ";
                        var r = n.disabled ? "disabled" : n.checked ? "checked" : "";
                        t += '<li class="menu-list-item"> <label class="menu-list-link menu-' + n.id + " menu-switch " + r + '"> <input class="menu-switch-input" type="checkbox" data-id="' + n.id + '" ' + r + ">  ",
                        n.iconTemplate ? t += " " + n.iconTemplate() + " " : t += ' <span class="menu-icon"></span> ',
                        t += " " + i(n.label) + ' <div class="menu-switch-fake ' + r + '"> <div class="menu-switch-pin"></div> </div> </label></li> '
                    } else
                        "button" == n.type ? (t += ' <li class="menu-list-item ' + (n.hidden ? "hidden" : "") + '"> <div class="menu-list-link menu-' + n.id + '" data-id="' + n.id + '">  ',
                        n.iconTemplate ? t += " " + n.iconTemplate() + " " : t += ' <span class="menu-icon"></span> ',
                        t += " " + i(n.label) + " </div></li> ") : "history" == n.type && (t += ' <li class="menu-list-item ' + (n.hidden ? "hidden" : "") + '"> <a href="' + (n.href || "#") + '" rel="noreferrer" target="_blank" class="menu-list-link menu-' + n.id + " " + (n.disabled ? "disabled" : "") + '" data-id="' + n.id + '">  ',
                        n.iconTemplate ? t += " " + n.iconTemplate() + " " : t += ' <span class="menu-icon"></span> ',
                        t += ' <span class="menu-label">' + n.label + "</span> </a></li> ");
            return t += "</ul>"
        }
    },
    166: function(e, t, i) {
        "use strict";
        i.r(t),
        i.d(t, "MenuViewFooter", (function() {
            return p
        }
        ));
        var s = i(3)
          , n = (i(167),
        i(95))
          , a = i(14)
          , o = i(0)
          , r = i(135)
          , h = i(88)
          , d = i(108)
          , l = i(130)
          , c = i(12)
          , u = i(131);
        let p = class extends n.a {
            constructor() {
                super(),
                this.initResponseReceived = !1,
                this.isInfoOpened = !1,
                this.isMouseDown = !1,
                this.isPopupOpen = !1,
                this.dynamicOffsetManager = Object(o.d)(d.a),
                this.fsButtonMediator = Object(o.d)(u.FullScreenButtonMediator),
                this.initialize()
            }
            initialize() {
                this.menuData = this.buildMenu(),
                super.initialize(),
                this.dynamicOffsetManager.add({
                    bottom: ()=>this.footerPanelHeight
                })
            }
            renderMenu() {
                super.renderMenu(),
                this.initClock(),
                this.initFSButton()
            }
            initClock() {
                this.widgets.addWidget({
                    selector: ".footer-time-item",
                    widget: new r.a({
                        cssClass: "footer-clock"
                    })
                })
            }
            async initFSButton() {
                if (!await this.fsButtonMediator.isFullscreenButtonAvailable())
                    return;
                const e = new l.FullscreenButton({
                    cssClass: "footer-item no-padding",
                    iconClass: "active-element footer-icon"
                });
                this.widgets.addWidget({
                    selector: ".footer-col.right > .footer-item",
                    widget: e,
                    insert: !0
                }),
                this.fsButtonMediator.initialize(e)
            }
            muteSound(e, t) {
                super.muteSound(e, t),
                this.mouseUp(),
                this.checkMutedState()
            }
            setVolume(e) {
                super.setVolume(e),
                this.checkMutedState()
            }
            onMouseOut(e) {
                var t;
                -1 === (null === (t = e.toElement || e.relatedTarget) || void 0 === t ? void 0 : t.className.indexOf("footer-volume")) && this.mouseUp()
            }
            addListeners() {
                super.addListeners();
                const {click: e, up: t, down: i, move: s, out: n} = this.device.event
                  , {volPanel: a, soundButtonOn: o, soundButtonOff: r, helpButton: d, infoButton: l, cashierButton: c} = this.elements;
                if (d.addEventListener(e, e=>{
                    e.preventDefault(),
                    this.openHelp()
                }
                ),
                l.addEventListener(e, e=>{
                    e.preventDefault(),
                    this.dispatcher.emit("INFO")
                }
                ),
                c.addEventListener(e, this.onCashierButtonClick),
                a.addEventListener("transitionend", this.mouseUp),
                a.addEventListener(n, this.onMouseOut, !0),
                a.addEventListener(t, this.mouseUp),
                a.addEventListener(i, e=>{
                    this.isMouseDown = !0,
                    this.moveSlider(e)
                }
                ),
                a.addEventListener(s, e=>{
                    this.isMouseDown && this.moveSlider(e)
                }
                ),
                o.addEventListener(e, ()=>this.muteSound(!0)),
                r.addEventListener(e, ()=>this.muteSound(!1)),
                this.history.visible && this.addHistoryButtonListeners(),
                this.dispatcher.on("viewBalanceUpdate", this.setBalance, this).on("POPUP_STATE_UPDATE", this.onPopupStateUpdate, this).on("MENU_SET_OPTIONS", this.setOptions, this).once(h.a.GAME_API_INITIALIZED, this.onGameAPIInitialized, this).once("SPLASH_COMPLETE", this.onSplashComplete, this),
                this.wrapperModel.liveGame)
                    return this.onInitResponse();
                this.dispatcher.once("INIT_RESPONSE_RECEIVED", this.onInitResponse, this)
            }
            addHistoryButtonListeners() {
                const {historyButton: e} = this.elements
                  , {click: t, over: i, out: s} = this.device.event
                  , n = t=>Object(c.f)(e, t)
                  , a = ()=>n(!1);
                e.addEventListener(t, this.onClickGameHistoryButton),
                e.addEventListener(i, ()=>n(!0)),
                e.addEventListener(s, a),
                addEventListener("blur", a)
            }
            onInitResponse() {
                this.initResponseReceived = !0,
                this.updateButtonsDisabledState()
            }
            onGameAPIInitialized() {
                this.gameAPIManager.gameAPI.addListener(h.a.PAYTABLE_OPENED, ()=>this.onInfoStateUpdate(!0)).addListener(h.a.PAYTABLE_CLOSED, ()=>this.onInfoStateUpdate(!1))
            }
            onInfoStateUpdate(e) {
                e !== this.isInfoOpened && (this.isInfoOpened = e,
                this.updateButtonsDisabledState())
            }
            onPopupStateUpdate(e) {
                e !== this.isPopupOpen && (this.isPopupOpen = e,
                this.updateButtonsDisabledState())
            }
            updateButtonsDisabledState() {
                const e = this.isPopupOpen || !this.initResponseReceived;
                Object(c.d)(this.elements.helpButton, e, !0);
                const t = this.isPopupOpen || this.isInfoOpened;
                Object(c.d)(this.elements.infoButton, t, !0)
            }
            findMenuElements() {
                super.findMenuElements(),
                this.elements = {
                    soundButtonOn: this.el(".footer-volume-icon-on"),
                    soundButtonOff: this.el(".footer-volume-icon-off"),
                    cashierButton: this.el(".footer-cashier-btn"),
                    historyButton: this.el(".footer-history-btn"),
                    balanceLabel: this.el(".footer-balance .counter-value"),
                    volPanel: this.el(".footer-volume-panel"),
                    volTrack: this.el(".footer-volume-track"),
                    helpButton: this.el(".footer-help-icon"),
                    infoButton: this.el(".footer-info-icon"),
                    footerPanel: this.el(".footer-panel")
                }
            }
            onDisabled(e) {
                super.onDisabled(e),
                Object(c.d)(this.element, e)
            }
            enableSoundControl() {
                Object(c.d)(this.el(".footer-volume"), !1)
            }
            mouseUp() {
                this.isMouseDown = !1
            }
            setBalance(e, t) {
                this.elements.balanceLabel.textContent = t
            }
            setSoundSlider(e) {
                this.elements.volTrack.firstElementChild.style.width = e + "%"
            }
            moveSlider(e) {
                const t = this.elements.volTrack
                  , i = t.getBoundingClientRect().left + t.clientLeft
                  , s = 100 * (e.clientX - i) / t.clientWidth;
                this.setVolume(s < 0 ? 0 : s)
            }
            checkMutedState() {
                const {isMutedSound: e} = this.model
                  , {soundButtonOn: t, soundButtonOff: i} = this.elements;
                Object(c.e)(t, e),
                Object(c.e)(i, !e),
                this.setSoundSlider(e ? 0 : this.model.volume)
            }
            buildMenu() {
                const {showPlayForReal: e, playForRealURL: t} = this.wrapperModel;
                return {
                    playModeLabel: this.lang("playForReal"),
                    balanceLabel: this.lang("balance"),
                    cashierLabel: this.lang("cashier"),
                    historyLabel: this.lang("history"),
                    cashierUrl: this.cashier.URL,
                    isCashierHidden: this.cashier.hidden,
                    historyUrl: this.history.URL,
                    isHistoryHidden: !this.history.visible,
                    playForRealUrl: t,
                    showPlayForReal: e
                }
            }
            getTemplate() {
                return i(171)
            }
            setOptions({footerPanelOptions: e}) {
                if (!e)
                    return;
                const {cssClass: t, showInfo: i} = e;
                if (t) {
                    const {forceCssClass: i=!0} = e
                      , {footerPanel: s} = this.elements;
                    s.classList.toggle(t, i),
                    this.dispatcher.emit("INITIATE_RESIZE")
                }
                void 0 !== i && this.setMenuItemVisibility("info", i)
            }
            setVisible(e) {
                super.setVisible(e),
                this.dispatcher.emit("INITIATE_RESIZE")
            }
            onSplashComplete() {
                this.setVisible(!0),
                this.model.menuState.open = !0,
                this.enableSoundControl()
            }
            get footerPanelHeight() {
                return this.elements.footerPanel.clientHeight
            }
        }
        ;
        Object(s.a)([a.a], p.prototype, "onMouseOut", null),
        Object(s.a)([a.a], p.prototype, "mouseUp", null),
        p = Object(s.a)([Object(o.b)(n.a)], p)
    },
    167: function(e, t, i) {},
    168: function(e, t, i) {},
    169: function(e, t) {
        e.exports = function(e) {
            var t = '<div class="fs-button ' + e.cssClass + '"> <div ';
            return e.iconClass && (t += 'class="' + e.iconClass + '"'),
            t += '> <svg viewBox="0 0 16 16" width="16" height="16"> <path class="expand" d="M1100,29V27h3V24h2v5Zm-9,0h-2V24h2v3h3v2Zm12-11V15h-3V13h5v5Zm-14,0V13h5v2h-3v3Z" transform="translate(-1089 -13)"/> <path class="collapse" d="M1100,29V24h5v2h-3v3Zm-8,0V26h-3V24h5v5Zm10-11h-2V13h2v3h3v2Zm-13,0V16h3V13h2v5Z" transform="translate(-1089 -13)"/> </svg> </div> <div class="active-overlay"></div></div>'
        }
    },
    170: function(e, t, i) {
        "use strict";
        i.r(t),
        i.d(t, "NativeFullScreen", (function() {
            return n
        }
        ));
        i(102),
        i(8);
        const s = i(51);
        class n {
            enter() {
                return s.request()
            }
            async mobileRequest() {}
            exit() {
                return s.exit()
            }
            get isFullscreen() {
                return s.isFullscreen
            }
            onChange(e) {
                return s.onchange(e)
            }
        }
    },
    171: function(e, t) {
        e.exports = function(e) {
            var t = '<div class="wrapper-menu footer-menu hidden"> <div class="footer-panel"> <div class="footer-col left"> <div class="footer-item footer-counter footer-balance"> <div class="counter-label">' + e.balanceLabel + '</div> <div class="counter-value"></div> </div> <div class="footer-item footer-cashier ' + (e.isCashierHidden ? "hidden" : "") + '"> <a href="' + (e.cashierUrl || "#") + '" class="active-element footer-cashier-btn menu-cashier menu-disabling-sensitive ';
            return e.cashierUrl || (t += "disabled"),
            t += '"> <svg viewBox="0 0 13 13" width="13" height="13"> <path d="M356.5,29a6.5,6.5,0,1,1,6.5-6.5A6.507,6.507,0,0,1,356.5,29ZM354,22h0v1h2v2h1V23h2V22h-2V20h-1v2h-2Z" transform="translate(-350 -16)"/> </svg> <span>' + e.cashierLabel + '</span> </a> <div class="active-overlay"></div> </div> </div> <div class="footer-col center"> ',
            e.showPlayForReal && (t += ' <a href="' + e.playForRealUrl + '" class="footer-play-btn">' + e.playModeLabel + "</a> "),
            t += ' </div> <div class="footer-col right"> <div class="footer-item no-padding footer-help-item hidden"> <div class="active-element footer-icon footer-help-icon menu-help menu-disabling-sensitive disabled-w"> <svg viewBox="0 0 10 16" width="10" height="16" class="help-icon"> <path d="M1165.12,27.74a1.119,1.119,0,1,1,1.11,1.26A1.192,1.192,0,0,1,1165.12,27.74Zm.108-4.029a3.516,3.516,0,0,1,2.183-3.228c.147-.088.457-.3.547-.371a2.637,2.637,0,0,0,.567-3.729,2.593,2.593,0,0,0-1.428-1.1v0a2.347,2.347,0,0,0-.869-.163,2.8,2.8,0,0,0-2.151.788,5.3,5.3,0,0,0-1.071,1.985c-.163.715-.223,1.261-1,1.261S1161,18.66,1161,17.889a5.1,5.1,0,0,1,1.628-3.552A4.694,4.694,0,0,1,1166.092,13a4.771,4.771,0,0,1,4.125,2.149,4.721,4.721,0,0,1-.579,5.935l.005,0a6.431,6.431,0,0,1-.845.694c-.208.132-.367.221-.533.313-.581.329-1.031.257-1.031,1.617,0,.77-.223,1.261-1.006,1.261S1165.215,24.48,1165.228,23.711Z" transform="translate(-1161 -13)"/> </svg> </div> <div class="active-overlay"></div> </div> <div class="footer-item no-padding footer-info-item hidden"> <div class="active-element footer-icon footer-info-icon menu-info menu-disabling-sensitive"> <svg viewBox="0 0 250 250" width="18" height="18" class="info-icon"> <path d="M125 0c34.52 0 65.77 13.99 88.39 36.61C236.01 59.23 250 90.48 250 125s-13.99 65.77-36.61 88.39C190.77 236.01 159.52 250 125 250s-65.77-13.99-88.39-36.61C13.99 190.77 0 159.52 0 125s13.99-65.77 36.61-88.39C59.23 13.99 90.48 0 125 0zm-20.49 61.59c0-5.73 1.99-10.57 5.98-14.51 3.94-3.98 8.78-5.97 14.51-5.97 5.81 0 10.65 1.95 14.59 5.89 3.94 3.94 5.89 8.78 5.89 14.59 0 5.73-1.99 10.61-5.97 14.68-3.94 4.02-8.78 6.05-14.51 6.05-5.57 0-10.37-2.03-14.43-6.14-4.02-4.1-6.06-8.94-6.06-14.59zm39.51 147.3h-37.8v-107.3l37.8-5.12v112.42zm52.45-155.36c-18.29-18.29-43.56-29.6-71.47-29.6-27.91 0-53.18 11.31-71.47 29.6S23.93 97.09 23.93 125c0 27.91 11.31 53.18 29.6 71.47s43.56 29.6 71.47 29.6c27.91 0 53.18-11.31 71.47-29.6s29.6-43.56 29.6-71.47c0-27.91-11.31-53.18-29.6-71.47z"/> </svg> </div> <div class="active-overlay"></div> </div> <div class="footer-item no-padding footer-history-item ' + (e.isHistoryHidden ? "hidden" : "") + '"> <a href="' + (e.historyUrl || "#") + '" target="_blank" rel="noreferrer" class="active-element footer-icon footer-history-btn menu-history disabled"> <svg viewBox="0 0 17 16" width="17" height="16"> <path d="M10.223,4.6V8.218l1.908,1.465c.292.218.246.908-.051,1.255-.543.632-1.393.16-1.575,0L8.075,9.057V4.6c0-.365.711-.441,1.076-.441S10.223,4.232,10.223,4.6ZM9.2,16.356a8.128,8.128,0,0,1-7.892-6.191c-.036-.415.15-.773.8-.978,1.164-.368,1.4,1.05,1.4,1.05l.005-.043a6.053,6.053,0,1,0,.256-4.541l1.193-.589a.782.782,0,1,1,.693,1.4L2.857,7.845a.881.881,0,0,1-.186.064.792.792,0,0,1-.35-.006.82.82,0,0,1-.461-.325l-.007-.009L.129,4.9a.782.782,0,0,1,1.313-.849l.467.584A8.126,8.126,0,1,1,9.2,16.356Z" transform="translate(-0.004 -0.104)"/> </svg> </a> <div class="active-overlay"></div> </div> <div class="footer-item no-padding footer-volume disabled"> <div class="active-element footer-icon footer-volume-icon footer-volume-icon-on hidden"> <svg viewBox="0 0 17 16" width="17" height="16"> <path d="M1200,29v-.2l-3.979-3.8H1193V17h3.281L1200,13.336V13h2V29Zm0-2.932V16.043L1197,19h-2v4h2v.2Zm6,.932a8.563,8.563,0,0,0,0-11h2s2,1.037,2,5.509A7.951,7.951,0,0,1,1208,27Zm-3-2a8.31,8.31,0,0,0,1-3.523A8.088,8.088,0,0,0,1203,18h2a8.242,8.242,0,0,1,1,3.509A8.154,8.154,0,0,1,1205,25Z" transform="translate(-1193 -13)"/> </svg> </div> <div class="active-element footer-icon footer-volume-icon footer-volume-icon-off hidden"> <svg viewBox="0 0 17 16" width="17" height="16"> <path d="M1200,29v-.2l-3.979-3.8H1193V17h3.281L1200,13.336V13h2V29Zm0-2.932V16.043L1197,19h-2v4h2v.2Zm4.777-2.315a.949.949,0,0,1,.18-1.229l1.315-1.28-1.481-1.371a.956.956,0,0,1,0-1.246.732.732,0,0,1,1.115,0l1.566,1.449,1.638-1.6a.737.737,0,0,1,1.1.2.949.949,0,0,1-.18,1.229l-1.334,1.3,1.451,1.343a.957.957,0,0,1,0,1.247.732.732,0,0,1-1.115,0l-1.536-1.422-1.62,1.577a.729.729,0,0,1-.459.165A.764.764,0,0,1,1204.777,23.753Z" transform="translate(-1193 -13)"/> </svg> </div> <div class="active-overlay"></div> <div class="footer-volume-panel"> <div class="footer-volume-track"> <div class="footer-volume-fill"> <div class="footer-volume-pin"></div> </div> </div> </div> </div> <div class="footer-item footer-time-item"></div> </div> </div></div>'
        }
    },
    172: function(e, t) {},
    235: function(e, t, i) {
        "use strict";
        i.r(t);
        var s = i(0)
          , n = i(16)
          , a = i(3)
          , o = i(95)
          , r = i(87)
          , h = i(92)
          , d = i(135)
          , l = i(8)
          , c = (i(161),
        i(89));
        class u extends c.a {
            getTemplate() {
                return ()=>'<div class="extra-elements-container"></div>'
            }
            addListeners() {
                super.addListeners(),
                this.dispatcher.on("RESIZE", this.onResize, this)
            }
            removeListeners() {
                super.removeListeners(),
                this.dispatcher.off("RESIZE", this.onResize)
            }
            onResize({marginSettings: e, dynamicOffsets: t}) {
                this.el.style.top = e.top + t.top + "px"
            }
        }
        let p = class {
            constructor() {
                this.dispatcher = Object(s.d)(l.a),
                this.widgetManager = Object(s.d)(h.a),
                this.isSidebar = Object(s.d)(r.a).isSidebar,
                this.initialize()
            }
            initialize() {
                this.initMenu(),
                this.isSidebar && (this.initExtraElements(),
                this.initClock()),
                this.isSidebar && this.initFSButton(),
                this.initGameName()
            }
            initMenu() {
                this.isSidebar ? i(236) : i(166),
                Object(s.d)(o.a)
            }
            initExtraElements() {
                this.extraElements = new u,
                this.widgetManager.addWidget({
                    root: document.body,
                    widget: this.extraElements
                })
            }
            initClock() {
                this.widgetManager.addWidget({
                    root: this.extraElements.element,
                    widget: new d.a({
                        cssClass: "clock",
                        configurable: !0
                    })
                })
            }
            async initFSButton() {
                {
                    const {FullScreenButtonMediator: e} = i(131)
                      , t = Object(s.d)(e)
                      , {FullscreenButton: n} = i(130);
                    if (!await t.isFullscreenButtonAvailable())
                        return;
                    await this.dispatcher.promisifiedOnce("MENU_WAS_DISPLAYED");
                    const a = new n({
                        cssClass: "fs-button-widget",
                        configurable: !0
                    });
                    this.widgetManager.addWidget({
                        root: this.extraElements.element,
                        widget: a
                    }),
                    t.initialize(a)
                }
            }
            initGameName() {}
        }
        ;
        p = Object(a.a)([s.a], p);
        var m = i(5)
          , b = i(4);
        const v = "HIDE_MENU_BUTTON"
          , f = "SHOW_MENU_BUTTON"
          , g = "UPDATE_POPUP_STATE"
          , O = [["HELP", "MENU_HELP"], ["FB_START", "FREEBETS_START"], ["MENU_BUTTON_UPDATE", "MENU_BUTTON_UPDATE"], ["MENU_VISIBILITY", "MENU_STATE_UPDATE"], ["POPUP_STATE_UPDATE", g], ["FULLSCREEN_CHANGE", "FULLSCREEN_CHANGE"], ["BC_UPDATE_TIMER", "BC_UPDATE_TIMER"], ["BC_CREATE_SIDEBAR_BUTTON", "BC_CREATE_SIDEBAR_BUTTON"], ["BC_CREATE_SIDEBAR_BUTTON", "BC_CREATE_BUTTON_BNS_MOBILE"], ["BC_CREATE_BALANCE_PANEL", "BC_CREATE_BALANCE_PANEL"], ["BC_CREATE_BALANCE_PANEL", "BC_CREATE_PANEL_BNS_MOBILE"], ["BC_READY_TO_REDEEM", "BC_READY_TO_REDEEM"], ["BC_HIDE_CUSTOM_REAL_BUTTON", "BC_HIDE_CUSTOM_REAL_BUTTON"], ["ERROR_POPUP_BUTTON_PRESSED", "ERROR_POPUP_BUTTON_PRESSED"], ["JP_TICKERS_UPDATED", "JP_TICKERS_UPDATED"], ["DOCUMENT_VISIBILITY_CHANGE", "DOCUMENT_VISIBILITY_CHANGE"], ["MENU_ITEM_CLICK", "MENU_ITEM_CLICK"]];
        var E = i(83)
          , S = i(84)
          , M = i(9)
          , w = i(106)
          , y = (i(102),
        i(17))
          , _ = i(86)
          , T = i(13)
          , I = i(98)
          , P = i(114)
          , C = i(1)
          , L = i(85)
          , B = i(119)
          , j = i(122)
          , A = i(105)
          , U = i(18)
          , R = i(11)
          , N = i(6)
          , k = i(91);
        let D = class {
            constructor() {
                this.wrapperModel = Object(s.d)(T.a),
                this.gameDetector = Object(s.d)(k.a),
                this.isIFrameMode = Object(N.b)();
                const {features: {live: e}, isSlot: t} = this.gameDetector;
                this.isLive = e || !1,
                this.isSlot = t,
                this.isAllowExternalGameModules = this.gameDetector.isAllowExternalGameModules(),
                this.BNSCanBeLoaded = !1 !== Object(C.d)("bns") && !e,
                this.isBNSMode = this.wrapperModel.isBNSMode,
                this.hasPokerStars = this.isIFrameMode && Object(C.j)("pokerstars"),
                this.isFunMode = this.wrapperModel.funMode
            }
        }
        ;
        D = Object(a.a)([s.a], D);
        const F = e=>{
            const t = Object(s.d)(D)
              , i = R.b[e].reduce((e,i)=>((({predicateFn: e, iFramePlugin: t, name: i})=>e || (t ? ({isIFrameMode: e})=>e && Object(C.j)(i) : ()=>Object(C.j)(i)))(i)(t) && e.push(Object(U.a)(i.name)),
            e), []);
            return Promise.all(i)
        }
          , V = (e,t)=>{
            const i = R.a[e];
            if (!i)
                return Promise.reject(`Can not find plugin "${e}" !`);
            const {predicateFn: n} = i;
            return n && !n(Object(s.d)(D)) ? Promise.reject() : Object(U.a)(i.name, t)
        }
        ;
        var x = i(88);
        const G = ["jackpot", "live_adapter"];
        let H = class {
            constructor() {
                this.server = Object(s.d)(E.a),
                this.wrapperModel = Object(s.d)(T.a),
                this.dispatcher = Object(s.d)(l.a);
                const e = Object(s.d)(D)
                  , {BNSCanBeLoaded: t, isBNSMode: i, isSlot: n} = e;
                !i && n && this.addFreeBetsMiddleware(),
                i || (()=>{
                    const e = Object(C.c)("promo_id")
                      , t = Object(s.d)(A.a).gamePlayerStorage.getItem("bns_redeem");
                    if (!e || !t)
                        return !1;
                    const {id: i, result: n} = JSON.parse(t);
                    return n && i === e
                }
                )() ? V("bns") : t && this.addBNSMiddleware(),
                (()=>{
                    let e;
                    const t = Object(s.d)(A.a).playerStorage.getItem("abTesting");
                    try {
                        e = t && JSON.parse(t)
                    } catch (e) {}
                    e && V("ab_testing", {
                        abDataFromStorage: e
                    })
                }
                )(),
                this.addListeners()
            }
            addBNSMiddleware() {
                const e = this.server.responseMiddleware.add(async t=>{
                    var i;
                    return (null === (i = t.balance) || void 0 === i ? void 0 : i.bonusCoins) && (e(),
                    await V("bns")),
                    t
                }
                )
            }
            addFreeBetsMiddleware() {
                const e = this.server.responseMiddleware.add(async t=>{
                    var i, s;
                    return (null === (s = null === (i = t.balance) || void 0 === i ? void 0 : i.freeBets) || void 0 === s ? void 0 : s.amount) && (e(),
                    await V("free_bets")),
                    t
                }
                )
            }
            async addListeners() {
                this.dispatcher.once("INIT_RESPONSE_RECEIVED", this.onInitResponse, this);
                const [e] = await this.dispatcher.awaitAllOnce("INIT_RESPONSE_RECEIVED",x.a.GAME_API_INITIALIZED);
                (({jrsdSettings: e={}, brandSettings: t={}, gameSettings: i={}})=>{
                    i.turbo && !1 !== e.turbo && !1 !== t.turbo && V("default_turbo")
                }
                )(e)
            }
            onInitResponse(e) {
                const {abTesting: t, extraData: i={}} = e
                  , {POPItalyInsight: s, POPSpainRegulation: n} = i;
                (s || !1) && (V("popitaly"),
                this.wrapperModel.fsButtonVisible = !1),
                (n || !1) && V("popspain");
                const a = t || !1;
                a && V("ab_testing", {
                    abDataFromServer: a
                })
            }
            async install() {
                this.wrapperModel.liveGame || await i.e(37).then(i.bind(null,241));
                const e = [F("main")];
                await Promise.all(e)
            }
            loadPlugin(e) {
                return G.includes(e) ? V(e) : Promise.reject("There is no public plugin with name: " + e)
            }
            beforeGameLoad() {
                return F("beforeGameLoad")
            }
        }
        ;
        H = Object(a.a)([s.a], H);
        let z = class {
            constructor() {
                this.dispatcher = Object(s.d)(l.a);
                const e = {
                    hidden: "visibilitychange",
                    webkitHidden: "webkitvisibilitychange",
                    mozHidden: "mozvisibilitychange",
                    msHidden: "msvisibilitychange"
                };
                let t;
                for (const i in e)
                    if (i in document) {
                        this.hiddenPropertyName = i,
                        t = e[i];
                        break
                    }
                document.addEventListener(t, ()=>{
                    this.dispatcher.emit("DOCUMENT_VISIBILITY_CHANGE", this.visible)
                }
                )
            }
            get visible() {
                return !document[this.hiddenPropertyName]
            }
        }
        ;
        z = Object(a.a)([s.a], z);
        var Y = i(101)
          , Z = i(96)
          , W = i(123)
          , q = (i(94),
        i(104));
        class K extends M.EventEmitter {
            constructor() {
                super(),
                this.device = Object(s.d)(L.a),
                this.document = Object(s.d)(z),
                this.isCheatsSet = !1,
                this.balanceModel = Object(s.d)(I.a),
                this.deviceConfig = Object(s.d)(P.a),
                this.dispatcher = Object(s.d)(l.a),
                this.errorPopupMapping = Object(s.d)(Y.a),
                this.fullScreenManager = Object(s.d)(W.a),
                this.gameDetector = Object(s.d)(k.a),
                this.history = Object(s.d)(Z.a),
                this.locale = Object(s.d)(S.a),
                this.menu = Object(s.d)(o.a),
                this.menuModel = Object(s.d)(r.a),
                this.popupManager = Object(s.d)(_.a),
                this.server = Object(s.d)(E.a),
                this.splash = Object(s.d)(n.a),
                this.toasterManager = Object(s.d)(j.ToasterManager),
                this.wrapperModel = Object(s.d)(T.a),
                this.initialize()
            }
            initialize() {
                Object(s.d)(B.a).enableFor("BC_UI_UPDATE"),
                this.addListeners()
            }
            addListeners() {
                this.dispatcher.on("RELOAD", this.onReload, this).on("SHOW_GAME_MENUBUTTON", this.showGameMenuButton, this);
                for (const [e,t] of O)
                    this.dispatcher.on(e, e=>this.emit(t, e))
            }
            showPopup(e, t) {
                return "number" == typeof e ? this.popupManager.showById(e, t) : (e.params = t,
                this.popupManager.show(0, e))
            }
            showLoadErrorPopup() {
                return this.dispatcher.emit("FAILED_LOAD_RESOURCES"),
                ""
            }
            showLoadingPopup() {
                return this.popupManager.showLoading()
            }
            hidePopup(e) {
                this.popupManager.hide(e)
            }
            showToaster(e) {
                return this.toasterManager.show(e)
            }
            onPopupsStateUpdated(e) {
                this.on(g, e)
            }
            isPopupOpened() {
                return this.popupManager.isPopupOpened
            }
            showLimitPopup(e) {
                return this.popupManager.show(2, e)
            }
            showLimitInfoPopup(e) {
                return this.popupManager.show(3, e)
            }
            showHelp(e) {
                return this.popupManager.show(6, {
                    params: e
                })
            }
            showContentWindow(e, t, i) {
                var n;
                return (null === (n = t) || void 0 === n ? void 0 : n.buildNumber) ? ("object" == typeof t.rtp && (t = Object(s.d)(w.a).patchParamsWithRTP(t)),
                this.popupManager.show(6, {
                    content: e,
                    params: t
                })) : this.popupManager.show(4, {
                    content: e,
                    params: t,
                    className: i,
                    buttons: []
                })
            }
            showFreeBetsPopup(e) {
                return this.freeBets.showPopup(e)
            }
            updateFreeBetsButton(e={}) {
                return this.freeBets.updateButtonState(e)
            }
            updateMobileClock(e) {
                0
            }
            setAdditionalServerParams(e) {
                this.server.setAdditionalParams(e)
            }
            onResize(e) {
                this.dispatcher.on("RESIZE", e)
            }
            onFullScreen(e) {
                0
            }
            showSplash() {
                return this.splash.show(),
                Promise.resolve()
            }
            removeSplash() {
                this.splash.destroy()
            }
            enterFullScreen() {
                this.fullScreenManager.enterFullScreen()
            }
            exitFullScreen() {
                this.fullScreenManager.exitFullscreen()
            }
            isFullScreen() {
                return !!this.device.isAllowFullScreen() && this.fullScreenManager.isFullscreen
            }
            onSplashRemoved(e) {
                this.dispatcher.once("SPLASH_COMPLETE", e)
            }
            isSplashActive() {
                return this.splash.isActive
            }
            getVolume() {
                return this.menuModel.getVolume()
            }
            setVolume(e) {
                this.menu.setVolume(e)
            }
            muteSound(e) {
                this.dispatcher.emit("MUTE_SOUND", e)
            }
            onChangeSoundsVolume(e) {
                this.dispatcher.on("SOUND", e),
                this.menu.initSound()
            }
            onPayTableButtonClicked(e) {
                this.menuModel.isSidebar && this.dispatcher.on("ONPAYTABLE", e)
            }
            setButtonClickedSoundCallBack(e) {
                this.dispatcher.off("BUTTON_CLICK").on("BUTTON_CLICK", e)
            }
            setupServerEmulator(e) {}
            serverRequest(e, t) {
                return this.server.genericRequestSafe(e, t)
            }
            spin(e, t, i, s) {
                return this.server.spinRequest({
                    lines: e,
                    bet: t,
                    coin: i
                }, s)
            }
            bonusSelection(e) {
                return this.server.bonusSelectionRequest(e)
            }
            getJackpotTicker() {
                return this.server.jackpotTickerRequest()
            }
            startJackpotMiniGame() {
                return this.server.jackpotStartMiniGameRequest()
            }
            playJackpotMiniGame(e) {
                return this.server.jackpotPlayMiniGameRequest(e)
            }
            initServer(e={}, t={}) {
                return this.setServerOptions(e),
                this.server.initServer(t)
            }
            setupGameParameters(e, t) {
                var i;
                if (this.dispatcher.emit("SETUP_GAME_PARAMS", e),
                !1 === Object(C.d)("script"))
                    return;
                const {scripts: n=[]} = (null === (i = e) || void 0 === i ? void 0 : i.server) || Object(s.d)(m.a).server;
                Object(b.f)(n)
            }
            showMenu() {
                this.updateMenuState({
                    visible: !0
                })
            }
            hideMenu() {
                this.updateMenuState({
                    visible: !1
                })
            }
            disableMenu() {
                this.updateMenuState({
                    enabled: !1
                })
            }
            enableMenu() {
                this.updateMenuState({
                    enabled: !0
                })
            }
            openMenu() {
                0
            }
            closeMenu() {
                0
            }
            getBalance() {
                return this.balanceModel.getBalance()
            }
            addBalanceUpdateCallback(e, t=!0) {
                this.dispatcher.on("balanceUpdate", e),
                t && this.balanceModel.getLastBalanceData() && e(this.balanceModel.getLastBalanceData())
            }
            removeBalanceUpdateCallback(e) {
                this.dispatcher.off("balanceUpdate", e)
            }
            updateViewBalance(e, t) {
                this.balanceModel.updateViewBalance(e)
            }
            getViewBalance() {
                return this.balanceModel.viewBalance
            }
            initCheats(e) {}
            addViewBalanceUpdateCallback(e) {
                this.dispatcher.on("viewBalanceUpdate", e)
            }
            removeViewBalanceUpdateCallback(e) {
                this.dispatcher.off("viewBalanceUpdate", e)
            }
            getLocale() {
                return this.locale.code
            }
            activateHistory() {
                this.history.activate()
            }
            setHistoryParams(e) {
                this.history.setParams(e)
            }
            openHistory() {
                this.history.open({
                    source: 2
                })
            }
            getHistoryURL() {
                return this.history.URL
            }
            getMenuConfiguration() {
                return this.menu.getMenuConfiguration()
            }
            setMenuConfiguration(e) {
                this.menu.setMenuConfiguration(e)
            }
            setMenuOptions(e) {
                this.dispatcher.emit("MENU_SET_OPTIONS", e)
            }
            setMenuItemState(e, t) {
                this.menu.setMenuItemState(e, t)
            }
            getBottomMargin() {
                return 0
            }
            activateReelsConfigPanel(e) {
                0
            }
            onError(e) {
                this.dispatcher.on("SERVER_ERROR", e)
            }
            pageReload() {
                this.dispatcher.emit("RELOAD")
            }
            addToAnalyticsLog(e) {
                this.dispatcher.emit("ADD_TO_ANALYTICS", e)
            }
            sendToAnalytics(e) {
                this.dispatcher.emit("ANALYTICS_SEND_CUSTOM_DATA", e)
            }
            lazyAssetsLoaded() {
                this.device.saveDensitySettings()
            }
            onShowPayTable(e) {
                0
            }
            getFunMode() {
                return this.wrapperModel.funMode
            }
            isDevicePropertyMatched(e) {
                return this.deviceConfig.isDevicePropertyMatched(e)
            }
            showError(e, t) {
                this.server.handleError({
                    code: e,
                    message: t
                })
            }
            visibilityMenuItem(e, t) {
                return this.dispatcher.emit("CHANGE_MENU_ITEM_VISIBILITY", e, t)
            }
            goToLobby() {
                this.dispatcher.emit("GO_LOBBY")
            }
            createSocketConnection(e) {
                return this.server.createSocketConnection(e)
            }
            formatMoney(e, t, i) {
                const n = Object(s.d)(q.a);
                return n.setCurrencySymbol(t),
                n.formatNumber(e, i)
            }
            openCashier() {
                return this.dispatcher.emit("CASHIER_OPEN", {
                    source: 2
                })
            }
            visibilityPopups(e) {
                this.popupManager.visibility(e)
            }
            get currentPopupOptions() {
                const {currentPopup: e} = this.popupManager;
                return e && e.options
            }
            get externalModulesList() {
                return this.wrapperModel.externalModulesList
            }
            get socket() {
                return this.server.transport.socket
            }
            get serverModes() {
                return this.server.transportModes
            }
            get moneyFormatter() {
                return Object(s.d)(q.a)
            }
            showGameMenuButton(e) {
                this.emit(e ? f : v)
            }
            updateBonusCoinsUI(e) {
                this.dispatcher.emit("BC_UI_UPDATE", e)
            }
            forceBnsTimerUpdate() {
                this.dispatcher.emit("FORCE_BC_UI_UPDATE")
            }
            skipAvailableRedeemCheck() {
                this.dispatcher.emit("BC_SKIP_AVAILABLE_REDEEM_CHECK")
            }
            getPlayMode() {
                return this.wrapperModel.token.playmode
            }
            loadImages(e) {
                return Object(b.c)(e)
            }
            addErrorCodeToGroup(e, t) {
                this.errorPopupMapping.addToGroup(e, t)
            }
            updateMenuState(e) {
                this.dispatcher.emit("MENU_STATE", e)
            }
            getMenuState() {
                return this.menuModel.menuState
            }
            updateUIElement(e, t) {
                this.dispatcher.emit("UPDATE_UI_ELEMENT_" + e, t)
            }
            setServerOptions(e) {
                this.dispatcher.emit("SET_SERVER_OPTIONS", e)
            }
            showGameName(e) {
                this.gameDetector.showGameName(e)
            }
            onReload() {
                location.reload()
            }
            getPlugin(e) {
                return Object(s.d)(H).loadPlugin(e)
            }
            get token() {
                return this.wrapperModel.token
            }
            get viewBalance() {
                return this.getViewBalance()
            }
            set viewBalance(e) {
                this.updateViewBalance(e)
            }
        }
        Object(a.a)([Object(s.e)(y.a)], K.prototype, "freeBets", void 0);
        var J = i(97);
        let $ = 0;
        function Q() {
            const e = document.querySelector(".ph-jackpot-mega-win-iframe");
            if (!e) {
                if ($ > 40)
                    return;
                return setTimeout(Q, 2e3),
                void $++
            }
            const {contentWindow: t} = e
              , i = new (t.AudioContext || t.webkitAudioContext);
            "suspended" === i.state && i.resume().then(()=>{}
            )
        }
        var X = i(82);
        i.d(t, "WrapperLoader", (function() {
            return ee
        }
        ));
        class ee {
            constructor() {
                this.configs = Object(s.d)(m.a),
                this.device = Object(s.d)(L.a),
                this.dispatcher = Object(s.d)(l.a),
                this.pluginManager = Object(s.d)(H),
                this.popupManager = Object(s.d)(_.a),
                this.wrapperModel = Object(s.d)(T.a),
                this.initialize().then(()=>this.dispatcher.emit("CORE_READY"))
            }
            jpPopup() {
                const {funMode: e, isFunModeDisabled: t, playForRealURL: i, lobbyURL: s} = this.wrapperModel;
                if (!e || !t)
                    return !1;
                this.dispatcher.emit("MENU_STATE", {
                    visible: !1
                });
                const n = [];
                return i ? n.push({
                    title: "playForReal",
                    action: ()=>location.href = i
                }) : s && n.push({
                    title: "lobby",
                    action: ()=>location.href = s
                }),
                this.popupManager.show(0, {
                    message: "realModeOnlyMessage",
                    buttons: n
                }),
                !0
            }
            wrapGame() {
                const {device: e} = this
                  , {liveGame: t} = this.wrapperModel;
                if (t)
                    return void this.dispatcher.emit("INITIATE_RESIZE");
                const i = document.getElementById("canvas");
                i ? (i.parentElement === document.body && e.gameWrapper.appendChild(i),
                this.dispatcher.emit("INITIATE_RESIZE"),
                i.addEventListener("webglcontextlost", ()=>{
                    this.dispatcher.emit("RELOAD")
                }
                )) : setTimeout(()=>this.wrapGame(), 500)
            }
            gameRunner() {
                const e = this.wrapperModel.liveGame ? this.configs.game.loadingTimeout : 60;
                return new Promise((t,i)=>{
                    const s = e && setTimeout(i, 1e3 * e)
                      , n = ()=>{
                        const {launchGame: e} = window;
                        e && e instanceof Function ? (clearTimeout(s),
                        this.device.preLaunchGameHooks(),
                        e(this.wrapperAPI),
                        t()) : setTimeout(n, 500)
                    }
                    ;
                    n()
                }
                )
            }
            async initialize() {
                if (this.jpPopup())
                    return;
                Object(s.d)(p),
                this.wrapperAPI = new K,
                Object(s.d)(J.a).initialize(),
                this.device.browser.isUC || function() {
                    const e = window.AudioContext
                      , t = e || window.webkitAudioContext;
                    if (!t)
                        return;
                    let i, n;
                    const a = (()=>{
                        function e() {
                            if (n = new t,
                            i || "suspended" !== n.state)
                                return n;
                            const {click: e} = Object(s.d)(L.a).event;
                            return i = ()=>{
                                n.resume().then(()=>{
                                    location.search.indexOf("phantom_link") > -1 && Q()
                                }
                                ),
                                document.body.removeEventListener(e, i)
                            }
                            ,
                            document.body.addEventListener(e, i),
                            n
                        }
                        return e.prototype = t.prototype,
                        e
                    }
                    )();
                    !e && window.webkitAudioContext && (window.webkitAudioContext = a),
                    window.AudioContext = a
                }();
                await Promise.all([]),
                this.dispatcher.emit("GAME_STARTED_LOADING"),
                this.getNetworkSpeed();
                const e = Object(C.c)("script");
                if (e && await Object(b.e)(e),
                await this.pluginManager.install(),
                Object(s.d)(W.a).initialize(),
                await this.loadScripts(),
                !this.wrapperModel.liveGame) {
                    const e = Object(s.d)(X.a)
                      , t = (this.configs.game.es5bundle,
                    "");
                    e.initWrapperAPI(this.wrapperAPI),
                    await this.pluginManager.beforeGameLoad(),
                    await Object(b.e)(`desktop${t}.js`),
                    await(this.configs.path,Promise.resolve())
                }
                await this.startGame(),
                this.wrapGame(),
                window.Provider = "SkyWind"
            }
            getNetworkSpeed() {
                if (!this.configs.isSplashNeeded)
                    return;
                const {name: e, size: t} = Object(s.d)(n.a).networkTest;
                (async(e,t)=>{
                    const i = navigator
                      , s = i.connection || i.webkitConnection || i.mozConnection || {}
                      , n = s.downlink || s.downlinkMax;
                    if (n)
                        return 1024 * n;
                    const a = Date.now();
                    return await Object(b.c)(`${e}?${a}`),
                    8 * t / ((Date.now() - a) / 1e3)
                }
                )(e, t).then(e=>{
                    this.device.networkSpeed = e
                }
                )
            }
            async startGame() {
                try {
                    await this.gameRunner()
                } catch (e) {
                    throw this.dispatcher.emit("GAME_LOAD_FAILED"),
                    new Error(e || "Game doesn't load!")
                }
            }
            loadScripts() {
                const {scripts: e=[]} = this.configs.game;
                return Promise.all(e.map(({name: e, async: t})=>Object(b.e)(e, t)))
            }
        }
    },
    236: function(e, t, i) {
        "use strict";
        i.r(t);
        var s = i(3)
          , n = (i(162),
        i(95))
          , a = i(14)
          , o = i(0)
          , r = (i(10),
        i(4))
          , h = i(89)
          , d = i(109)
          , l = i(12);
        class c extends h.a {
            constructor() {
                super(),
                this.topPosition = 14,
                this.model = {
                    enabled: !1,
                    hidden: !1,
                    visible: !1
                },
                this.events = {
                    [this.device.event.down + " this"]: this.onDown,
                    [this.device.event.up + " this"]: this.onUp
                }
            }
            updateOffsets(e) {
                this.el.style.top = e + this.topPosition + "px"
            }
            addListeners() {
                super.addListeners(),
                this.dispatcher.on("MENU_STATE", this.onChangeState, this).on("MENU_SET_OPTIONS", this.onSetOptions, this).on("MENU_VISIBILITY", e=>this.setVisible(!e))
            }
            getTemplate() {
                return i(163)
            }
            onChangeState(e, t) {
                const {visible: i, enabled: s} = e;
                void 0 !== i && this.setVisible(i),
                void 0 !== s && this.setDisabled(!s, t)
            }
            onDown() {
                Object(l.f)(this.el, !0)
            }
            async onSetOptions(e) {
                const {style: t} = this.el
                  , {iconPath: i, hideButton: s, lockButtonState: n, buttonStyle: a} = e;
                if (!0 !== this._lockButtonState || !1 === n) {
                    if (a)
                        for (const e of Object.keys(a))
                            t[e] = a[e];
                    i && (await Object(r.c)(i),
                    this.el.classList.add("custom-button"),
                    t.backgroundImage = `url(${i})`),
                    e.isSingleIconState && (t.backgroundPosition = "0 0"),
                    void 0 !== s && (t.display = s ? "none" : "",
                    this.model.hidden = s,
                    this.update()),
                    this.setSize(e),
                    void 0 !== n && (this._lockButtonState = n)
                }
            }
            onUp() {
                Object(l.f)(this.el, !1),
                this.dispatcher.emit("MENU_STATE", {
                    open: !0
                })
            }
            setDisabled(e, t=!1) {
                Object(l.d)(this.el, e, t),
                this.model.enabled = !e,
                t || this.update()
            }
            setSize({buttonBounds: e, buttonStyle: t}) {
                var i, s;
                e && Object(d.a)(this.el, e);
                const n = (null === (i = t) || void 0 === i ? void 0 : i.top) && parseInt(t.top, 10) || (null === (s = e) || void 0 === s ? void 0 : s.y);
                n && (this.topPosition = n,
                this.updateOffsets(this.device.getMarginSettings().top))
            }
            setVisible(e) {
                this.model.hidden || (this.model.visible = e,
                Object(l.e)(this.el, !e),
                this.update())
            }
            update() {
                this.dispatcher.emit("MENU_BUTTON_UPDATE", this.model)
            }
        }
        var u = i(92)
          , p = i(91);
        i.d(t, "MenuViewSidebar", (function() {
            return m
        }
        ));
        let m = class extends n.a {
            constructor() {
                super(),
                this.isMenuSwipe = !1,
                this.isPopupOpen = !1,
                this.defaultActions = {
                    history: this.onClickGameHistoryButton,
                    cashier: this.onCashierButtonClick,
                    paytable: this.onClickPaytable,
                    lobby: ()=>this.dispatcher.emit("GO_LOBBY"),
                    help: ()=>this.openHelp()
                },
                this.sidebarButton = new c,
                this.initialize()
            }
            getMenuConfiguration() {
                return {
                    showPlayForReal: this.wrapperModel.showPlayForReal,
                    sidebar: this.model.sidebarConfig
                }
            }
            muteSound(e, t) {
                super.muteSound(e, t),
                this.setSoundCheckBoxState()
            }
            setMenuConfiguration(e) {
                const {menuListContainer: t} = this.elements;
                this.setSidebarListeners(!1),
                this.elements.soundButton = void 0,
                super.setMenuConfiguration(e),
                this.model.sidebarConfig = e.sidebar,
                t.innerHTML = this.renderSidebar(),
                this.findMenuElements(),
                this.setSidebarListeners(!0),
                this.setSoundCheckBoxState(),
                this.updateHistoryButton()
            }
            setMenuItemState(e, t) {
                const i = this.getMenuItemById(e);
                if (!i)
                    return;
                const {disabled: s, checked: n} = t
                  , {classList: a} = i;
                if (void 0 !== s && (Object(l.d)(i, s),
                a.contains("menu-switch"))) {
                    const t = i.querySelector(".menu-switch-input");
                    t.disabled = s,
                    this.setCheckBoxState(e, !s && t.checked)
                }
                void 0 !== n && a.contains("menu-switch") && this.setCheckBoxState(e, n)
            }
            setMenuItemVisibility(e, t) {
                super.setMenuItemVisibility(e, t);
                const i = this.model.sidebarConfig.find(t=>t.id === e);
                i && (i.hidden = !t)
            }
            setVolume(e) {
                super.setVolume(e > 0 ? 100 : -100),
                this.setSoundCheckBoxState()
            }
            addListeners() {
                super.addListeners(),
                this.dispatcher.on("MENU_SET_OPTIONS", this.onSetMenuOptions, this).on("RESIZE", this.updateOffsets, this).on("TOGGLE_PAYTABLE", this.onTogglePaytable, this).on("POPUP_STATE_UPDATE", e=>{
                    this.isPopupOpen = e
                }
                ),
                this.setSidebarListeners(!0);
                const {menuListContainer: e} = this.elements;
                e.addEventListener("change", e=>{
                    const t = e.target;
                    this.setCheckBoxState(t.dataset.id, t.checked)
                }
                ),
                e.addEventListener("click", e=>this.onSidebarClick(e))
            }
            findMenuElements() {
                super.findMenuElements(),
                this.elements = {
                    menuHolder: this.el(".menu-holder"),
                    menuOverlay: this.el(".menu-overlay"),
                    soundButton: this.el(".menu-sound>.menu-switch-input"),
                    historyButton: this.el(".menu-history"),
                    cashierButton: this.el(".menu-cashier"),
                    paytableButton: this.el(".menu-paytable"),
                    menuListContainer: this.el(".menu-list-container")
                }
            }
            getTemplate() {
                return i(164)
            }
            initialize() {
                this.preloadImages = ["sidebar-spr.png"],
                "mark4" === Object(o.d)(p.a).features.mark ? this.preloadImages.push("sidebar-btn-mark4.png") : this.preloadImages.push("sidebar-btn-icon-spr.png", "sidebar-btn-spr.png"),
                super.initialize()
            }
            async onChangeState(e) {
                await super .onChangeState(e);
                const {open: t} = e;
                void 0 !== t && t !== this.model.menuState.open && (t ? this.onOpenMenu() : this.onCloseMenu())
            }
            renderMenu() {
                this.menuData = this.buildMenu(),
                super.renderMenu(),
                Object(o.d)(u.a).addWidget({
                    widget: this.sidebarButton
                })
            }
            setVisible(e) {
                super.setVisible(e),
                e && this.updateOffsets(this.resizeManager.resolution)
            }
            toggleMenuPanel(e) {
                const {menuHolder: t, menuOverlay: i} = this.elements;
                Object(l.e)(t, !e),
                Object(l.e)(i, !e),
                this.setOverlayListening(e)
            }
            updateOffsets(e) {
                const {marginSettings: t, dynamicOffsets: i, height: s} = e
                  , {menuHolder: n} = this.elements
                  , a = t.top + i.top;
                this.sidebarButton.updateOffsets(a),
                n.style.top = t.top + "px",
                n.style.height = s + i.top + i.bottom + "px"
            }
            addMobileWorkarounds() {}
            buildMenu() {
                return this.model.sidebarConfig = this.initSideBar(),
                {
                    showPlayForReal: this.wrapperModel.showPlayForReal,
                    sidebar: this.renderSidebar()
                }
            }
            closePanels(e) {
                e && e.preventDefault(),
                this.onCloseMenu()
            }
            defaultMenuItemAction(e, t) {
                var i;
                this.dispatcher.emit("MENU_ITEM_CLICK", {
                    id: t
                }),
                t in this.defaultActions && this.defaultActions[t].call(this, e),
                "switch" !== (null === (i = this.getItemConfig(t)) || void 0 === i ? void 0 : i.type) && this.onCloseMenu()
            }
            getItemConfig(e) {
                return this.model.sidebarConfig.find(({id: t})=>t === e)
            }
            initSideBar() {
                const {click: e, up: t} = this.device.event
                  , {lobbyURL: i, playForRealURL: s, showPlayForReal: n} = this.wrapperModel
                  , a = {
                    id: "cashier",
                    type: "link",
                    newTab: !this.cashier.isSameTab,
                    href: this.cashier.URL
                }
                  , o = {
                    id: "lobby",
                    type: "button",
                    event: e
                }
                  , r = {
                    id: "playForReal",
                    type: "link",
                    href: s
                }
                  , h = {
                    id: "help",
                    hidden: !0,
                    type: "button",
                    event: e
                }
                  , d = [{
                    id: "paytable",
                    type: "button",
                    event: t
                }, {
                    id: "history",
                    type: "history",
                    href: this.history.URL,
                    hidden: !this.history.visible,
                    disabled: !this.history.enabled
                }, {
                    id: "sound",
                    type: "switch"
                }];
                return this.cashier.hidden || d.unshift(a),
                i && d.unshift(o),
                n && d.unshift(r),
                d.splice(d.length - 2, 0, h),
                d.forEach(e=>e.label = e.label || this.lang(e.id)),
                d
            }
            onClickPaytable() {
                this.dispatcher.emit("ONPAYTABLE"),
                this.playButtonClickSound()
            }
            onCloseMenu() {
                this.model.menuState.open = !1,
                this.toggleMenuPanel(!1),
                this.dispatcher.emit("MENU_VISIBILITY", !1)
            }
            onOpenMenu() {
                !this.isPopupOpen && this.model.menuState.enabled && (this.model.menuState.open = !0,
                this.toggleMenuPanel(!0),
                this.dispatcher.emit("MENU_VISIBILITY", !0),
                this.playButtonClickSound())
            }
            onSetMenuOptions({menuPosition: e}) {
                e && Object(l.c)(this.element, "right", "right" === e)
            }
            onSidebarClick(e) {
                let t = e.target;
                for (; t !== e.currentTarget && !t.dataset.id; )
                    t = t.parentElement;
                const i = t.dataset.id;
                i && this.defaultMenuItemAction(e, i)
            }
            onTogglePaytable(e) {
                this.setMenuItemState("paytable", {
                    disabled: e
                })
            }
            renderSidebar() {
                return i(165)(this.model.sidebarConfig)
            }
            setCheckBoxState(e, t) {
                this.switchCheckBox(e, t),
                "sound" === e && this.muteSound(!this.elements.soundButton.checked)
            }
            setOverlayListening(e) {
                const {menuOverlay: t} = this.elements
                  , {click: i} = this.device.event;
                e ? t.addEventListener(i, this.closePanels) : t.removeEventListener(i, this.closePanels)
            }
            setSidebarListeners(e) {
                this.model.sidebarConfig.forEach(({id: t, callback: i, event: s})=>{
                    if (!i)
                        return;
                    const n = this.getMenuItemById(t);
                    n && (e ? n.addEventListener(s, i) : n.removeEventListener(s, i))
                }
                )
            }
            setSoundCheckBoxState() {
                this.switchCheckBox("sound", !this.model.isMutedSound)
            }
            switchCheckBox(e, t) {
                const i = this.getMenuItemById(e)
                  , s = i.querySelector(".menu-switch-fake");
                s && (i.querySelector(".menu-switch-input").checked = t,
                Object(l.b)(s, t),
                Object(l.b)(i, t))
            }
            toggleMenuTouchEvents() {}
            get mobileElements() {
                const {menuOverlay: e, historyButton: t} = this.elements;
                return {
                    menuButton: this.sidebarButton.el,
                    menuOverlay: e,
                    historyButton: t
                }
            }
        }
        ;
        Object(s.a)([a.a], m.prototype, "closePanels", null),
        m = Object(s.a)([Object(o.b)(n.a)], m)
    },
    238: function(e, t, i) {
        "use strict";
        i.r(t);
        var s = i(0)
          , n = i(84)
          , a = i(5)
          , o = i(91);
        i(153),
        i(154),
        (async()=>{
            await Object(s.d)(a.a).loadSettings(),
            await Object(s.d)(n.a).initialize(),
            Object(s.d)(o.a).parseVersionConfig();
            const {WrapperLoader: e} = i(235);
            new e
        }
        )()
    },
    91: function(e, t, i) {
        "use strict";
        i.d(t, "a", (function() {
            return c
        }
        ));
        var s = i(3)
          , n = i(5)
          , a = i(0)
          , o = i(85)
          , r = i(1)
          , h = i(8)
          , d = i(88)
          , l = i(82);
        i(100);
        let c = class {
            constructor() {
                this.gameName = document.title,
                this.configs = Object(a.d)(n.a),
                this.dispatcher = Object(a.d)(h.a),
                this.gameAPIManager = Object(a.d)(l.a),
                this.initialize()
            }
            initialize() {
                this.dispatcher.once("INIT_RESPONSE_RECEIVED", this.checkIfGameNameMustBeShown, this).once(d.a.GAME_API_INITIALIZED, this.refineGameType, this);
                const {game: e, isLive: t} = this.configs;
                this.features = {
                    mark: e.slotGameType || "none",
                    arcadia: !1,
                    card: !1,
                    live: t,
                    slot: !!e.slotGameType,
                    table: !1
                }
            }
            get isMark5() {
                return "mark5" === this.features.mark
            }
            get isSlot() {
                return this.features.slot
            }
            isAllowExternalGameModules() {
                const {live: e, arcadia: t} = this.features;
                return !t && !e
            }
            showGameName(e) {
                this.gameNameElement || this.createGameNameElement();
                const t = e && e.styles;
                t && Object.assign(this.gameNameElement.style, t)
            }
            parseVersionConfig() {
                const {live: e, slot: t} = this.features;
                if (e || t)
                    return;
                let i = !1;
                const {version: s} = this.configs;
                for (const e of Object.keys(s)) {
                    const t = e.toLowerCase()
                      , n = t.match(/mark\w/);
                    if (n) {
                        const t = n[0];
                        this.features.mark = t,
                        "mark3" === t && parseInt(s[e].split(".")[0], 10) >= 14 && (this.features.mark = "mark3_ui20")
                    } else
                        t.indexOf("engine") > -1 ? this.features.mark = "mark3" : t.indexOf("arcadia") > -1 ? this.features.arcadia = !0 : t.indexOf("common") > -1 && (i = !0)
                }
                this.features.slot = "none" !== this.features.mark,
                this.features.table = !this.features.mark && !this.features.arcadia && !i
            }
            refineGameType() {
                var e;
                const t = null === (e = this.gameAPIManager.gameAPI.context) || void 0 === e ? void 0 : e.gameType;
                this.features.card = "CARD" === t,
                this.features.slot = "SLOT" === t,
                this.features.table = "TABLE" === t,
                h.a.emit("GAME_TYPE_REFINED")
            }
            checkIfGameNameMustBeShown({jrsdSettings: e}) {
                {
                    if (!e || !e.showGameName || !Object(r.d)("showGameName"))
                        return;
                    const {showGameNameDesktop: t, showGameNameMobile: i} = this.configs.game;
                    if (!1 === t)
                        return
                }
                this.showGameName()
            }
            createGameNameElement() {
                this.gameName = document.title,
                this.gameNameElement = document.createElement("div"),
                this.gameNameElement.classList.add("game-name"),
                this.gameNameElement.textContent = this.gameName,
                Object(a.d)(o.a).gameWrapper.appendChild(this.gameNameElement)
            }
        }
        ;
        c = Object(s.a)([a.a], c)
    },
    93: function(e, t, i) {},
    94: function(e, t, i) {
        "use strict";
        var s = i(3)
          , n = i(83)
          , a = i(0)
          , o = i(87)
          , r = i(12);
        i(93);
        class h {
            constructor() {
                this._visible = !1
            }
            set allowPopupsUI(e) {
                Object(r.c)(this.el, "under-popup", e)
            }
            set visible(e) {
                this._visible !== e && (this.el || this.create(),
                this._visible = e,
                Object(r.e)(this.el, !e))
            }
            create() {
                this.el = document.createElement("div"),
                this.el.className = "pause-overlay hidden",
                document.body.appendChild(this.el)
            }
        }
        var d = i(8)
          , l = i(82);
        i.d(t, "a", (function() {
            return u
        }
        ));
        const c = e=>{
            Object(r.c)(document.body, "paused", e)
        }
        ;
        let u = class {
            constructor() {
                this.isPaused = !1,
                this.server = Object(a.d)(n.a),
                this.menuModel = Object(a.d)(o.a),
                this.overlay = new h,
                this.dispatcher = Object(a.d)(d.a),
                this.gameAPIManger = Object(a.d)(l.a)
            }
            async pause({allowPopupsUI: e=!1, mute: t=1, showOverlay: i=!0}={}) {
                if (this.isPaused)
                    return;
                this.isPaused = !0,
                this.server.pause(),
                i && (this.overlay.visible = !0,
                this.overlay.allowPopupsUI = e),
                t && !this.menuModel.isMutedSound && this.proceedMute(t);
                const {isGameAPIAvailable: s} = this.gameAPIManger;
                s || this.dispatcher.emit("SET_KEYDOWN_DISABLED", !0),
                s && (await this.gameAPIManger.checkReelsStopped(),
                this.gameAPIManger.pause()),
                c(!0)
            }
            proceedMute(e) {
                this.isMuted = !0,
                2 === e ? (this.menuModel.muteSound(!0, !1),
                this.unmute = ()=>this.menuModel.muteSound(!1, !1)) : (this.dispatcher.emit("MUTE_SOUND", !0),
                this.unmute = ()=>this.dispatcher.emit("MUTE_SOUND", !1))
            }
            async resume() {
                if (!this.isPaused)
                    return;
                this.isPaused = !1,
                this.server.resume(),
                this.overlay.visible = !1,
                this.isMuted && (this.unmute(),
                this.isMuted = !1);
                const {isGameAPIAvailable: e} = this.gameAPIManger;
                e || this.dispatcher.emit("SET_KEYDOWN_DISABLED", !1),
                e && (await this.gameAPIManger.checkReelsStopped(),
                this.gameAPIManger.unpause()),
                c(!1)
            }
        }
        ;
        u = Object(s.a)([a.a], u)
    },
    95: function(e, t, i) {
        "use strict";
        i.d(t, "a", (function() {
            return y
        }
        ));
        var s = i(3)
          , n = i(0)
          , a = i(84)
          , o = i(83)
          , r = i(14)
          , h = i(5)
          , d = i(87)
          , l = i(4)
          , c = i(7)
          , u = i(106)
          , p = i(98)
          , m = i(13)
          , b = i(97)
          , v = i(6)
          , f = i(92)
          , g = i(85)
          , O = i(99)
          , E = i(8)
          , S = i(82)
          , M = i(96)
          , w = i(12);
        class y {
            constructor() {
                this.initialized = !1,
                this.preloadImages = [],
                this.afterResourcesLoaded = new c.a,
                this.device = Object(n.d)(g.a),
                this.dispatcher = Object(n.d)(E.a),
                this.gameAPIManager = Object(n.d)(S.a),
                this.helpModel = Object(n.d)(u.a),
                this.model = Object(n.d)(d.a),
                this.wrapperModel = Object(n.d)(m.a),
                this.resizeManager = Object(n.d)(b.a),
                this.history = Object(n.d)(M.a),
                this.cashier = Object(n.d)(O.a),
                this.widgets = Object(n.d)(f.a),
                this.balanceModel = Object(n.d)(p.a),
                this.configs = Object(n.d)(h.a),
                this.locale = Object(n.d)(a.a),
                this.server = Object(n.d)(o.a),
                this.wasDisplayed = !1
            }
            initialize() {
                this.loadResources(),
                this.renderMenu(),
                this.findMenuElements(),
                this.addListeners(),
                this.initialized = !0
            }
            findMenuElements() {
                this.element = document.querySelector(".wrapper-menu")
            }
            el(e) {
                return this.element.querySelector(e)
            }
            getMenuItemById(e) {
                return this.el(".menu-" + e)
            }
            muteSound(e, t) {
                this.model.muteSound(e, t)
            }
            setVolume(e) {
                this.model.setVolume(e)
            }
            initSound() {
                this.model.initSound(),
                setTimeout(()=>this.setVolume(this.model.volume), 0)
            }
            onDisabled(e) {
                this.model.menuState.enabled = !e
            }
            playButtonClickSound() {
                this.dispatcher.emit("BUTTON_CLICK")
            }
            renderMenu() {
                const e = this.getTemplate();
                document.body.insertAdjacentHTML("beforeend", e(this.menuData)),
                this.element = document.querySelector(".wrapper-menu")
            }
            getTemplate() {
                throw new Error("Method not implemented.")
            }
            async loadResources() {
                const {preloadImages: e} = this;
                e && e.length && await Object(l.c)(Object(v.k)(this.configs.path,e)),
                this.afterResourcesLoaded.resolve()
            }
            setMenuItemState(e, t, i=!1) {
                const s = this.getMenuItemById(e);
                s && void 0 !== t.disabled && Object(w.d)(s, t.disabled, i)
            }
            getMenuConfiguration() {
                return this.menuData
            }
            setMenuConfiguration(e) {
                this.menuData = e
            }
            addListeners() {
                this.dispatcher.on("MUTE_SOUND", this.muteSound, this).on("MENU_STATE", this.onChangeState, this).on("CHANGE_MENU_ITEM_VISIBILITY", this.setMenuItemVisibility, this),
                this.history.visible && this.dispatcher.on("HISTORY_UPDATED", this.updateHistoryButton, this),
                this.cashier.hidden || this.dispatcher.on("CASHIER_UPDATED", this.updateCashierButton, this)
            }
            onCashierButtonClick(e) {
                this.cashier.open({
                    source: 0,
                    event: e,
                    callback: this.updateBalance
                })
            }
            onClickGameHistoryButton(e) {
                this.history.open({
                    source: 0,
                    event: e
                })
            }
            async onChangeState({visible: e, enabled: t}) {
                await this.afterResourcesLoaded,
                void 0 !== e && (this.setVisible(e),
                e && !this.wasDisplayed && (this.wasDisplayed = !0,
                this.dispatcher.emit("MENU_WAS_DISPLAYED"))),
                void 0 !== t && this.onDisabled(!t)
            }
            setVisible(e) {
                this.model.menuState.visible = e,
                Object(w.e)(this.element, !e)
            }
            lang(e) {
                return Object(v.a)(this.locale.i18n(e))
            }
            setMenuItemVisibility(e, t) {
                const i = this.getMenuItemById(e);
                i && Object(w.e)(i.parentElement, !t)
            }
            openHelp() {
                this.helpModel.handleHelp()
            }
            updateHistoryButton() {
                const {historyButton: e} = this.elements;
                if (!this.history.visible || !e)
                    return;
                const {enabled: t, URL: i} = this.history;
                Object(w.d)(e, !t),
                e.href = i
            }
            updateCashierButton() {
                const {cashierButton: e} = this.elements;
                if (this.cashier.hidden || e)
                    return;
                const {enabled: t} = this.cashier;
                Object(w.d)(e, !t)
            }
            async updateBalance() {
                const {balance: {amount: e}} = await this.server.balanceRequest();
                this.gameAPIManager.isGameAPIAvailable ? await this.gameAPIManager.setBalance(e) : this.balanceModel.updateViewBalance(e)
            }
            arrange() {}
            close() {}
            closeMenu() {}
            closeSwitchPanel() {}
            get volume() {
                return this.model.volume
            }
            initalize() {}
        }
        Object(s.a)([r.a], y.prototype, "onCashierButtonClick", null),
        Object(s.a)([r.a], y.prototype, "onClickGameHistoryButton", null),
        Object(s.a)([r.a], y.prototype, "updateBalance", null)
    },
    96: function(e, t, i) {
        "use strict";
        var s = i(3)
          , n = i(83)
          , a = i(84)
          , o = i(6)
          , r = i(5)
          , h = i(0)
          , d = i(86)
          , l = i(13)
          , c = i(85)
          , u = i(90)
          , p = i(8)
          , m = i(1);
        i.d(t, "a", (function() {
            return v
        }
        ));
        const b = {
            3: e=>Object(h.d)(d.a).show(4, {
                iFrameURL: e,
                className: "game-history"
            }),
            0: o.l,
            2: e=>Object(o.l)(e, {
                name: "History"
            })
        };
        let v = class {
            constructor() {
                this.locale = Object(h.d)(a.a),
                this.configs = Object(h.d)(r.a),
                this.device = Object(h.d)(c.a),
                this.serverModel = Object(h.d)(u.a),
                this.wrapperModel = Object(h.d)(l.a),
                this.dispatcher = Object(h.d)(p.a),
                this.active = !1,
                this.rawURL = Object(m.f)("history_url"),
                this.available = !!this.rawURL,
                this.visible = !(!this.available || !Object(m.d)("history")),
                this.navigationMode = "1" !== Object(m.c)("history_in_popup") ? Object(m.d)("history_in_new_window") ? 2 : 0 : 3,
                this.isPopupMode = 3 === this.navigationMode,
                this._enabled = !1,
                this._URL = this.rawURL,
                this.params = {
                    mobile: !1,
                    historyUrl: location.href.split("?")[0].replace("index.html", "history.html")
                },
                this.available && (this.isWorkaroundNeeded = !this.isPopupMode && (this.device.isIOS || this.device.browser.isQQ),
                this.addListeners())
            }
            get enabled() {
                return this._enabled && !(this.isPopupMode && this.isPopupOpen)
            }
            get URL() {
                return this._URL
            }
            addListeners() {
                this.dispatcher.once("SESSION_CHANGE", this.activate, this).once("SETUP_GAME_PARAMS", this.onSetupGameParams, this).on("HISTORY_OPEN", this.open, this),
                this.isPopupMode && this.visible && this.dispatcher.on("POPUP_STATE_UPDATE", this.onPopupStateUpdate, this)
            }
            onPopupStateUpdate(e) {
                this.isPopupOpen = e,
                this.dispatcher.emit("HISTORY_UPDATED")
            }
            async onSetupGameParams({historyUrl: e, nameTranslations: t}) {
                const i = {};
                e && (i.historyUrl = e || this.configs.game.historyUrl);
                const s = await this.getGameName(t);
                s && (i.gameName = encodeURIComponent(s)),
                Object.keys(i).length && this.setParams(i)
            }
            async getGameName(e) {
                const {ID: t, NAME: i} = this.configs.game;
                if ("zh-cn" !== this.locale.code)
                    return i;
                if (e && e["zh-cn"])
                    return e["zh-cn"];
                const s = "games/" + t;
                try {
                    await this.locale.loadPlugin(s)
                } catch (e) {
                    return i
                }
                return this.locale.i18n(s + ".gameName")
            }
            activate() {
                if (this.active)
                    return;
                this.active = !0;
                const {screenDensity: e, isWebGLSupport: t} = this.device
                  , i = {
                    gameSession: Object(h.d)(n.a).getSession().getSession(),
                    dpi: e,
                    language: this.locale.code,
                    canvas: t ? 0 : 1,
                    api: this.serverModel.URL
                };
                this.setParams(i)
            }
            open(e) {
                if (!this.available)
                    return;
                this.dispatcher.emit("HISTORY_BEFORE_OPEN", e);
                const {event: t} = e;
                t && t.preventDefault(),
                b[this.navigationMode](this.URL)
            }
            setParams(e) {
                this.params = Object.assign(Object.assign({}, this.params), e),
                this._enabled = this.rawURL && "gameSession"in this.params && !this.wrapperModel.funMode || !1,
                this.updateURL(),
                this.dispatcher.emit("HISTORY_UPDATED")
            }
            updateURL() {
                var e, t;
                this._URL = (null === (t = null === (e = this.serverModel.initResponse) || void 0 === e ? void 0 : e.brandSettings) || void 0 === t ? void 0 : t.omitHistoryURLParams) ? this.rawURL : Object(m.h)(this.URL, Object.keys(this.params).map(e=>`${e}=${this.params[e]}`).join("&"))
            }
        }
        ;
        v = Object(s.a)([h.a], v)
    },
    99: function(e, t, i) {
        "use strict";
        var s = i(3)
          , n = i(6)
          , a = i(0)
          , o = i(86)
          , r = i(8)
          , h = i(1);
        const d = ()=>{
            const e = Object(h.c)("cashier_popup") || "800x600"
              , [,t,i] = /(\d+)x(\d+)/.exec(e);
            return `width=${t},height=${i}`
        }
        ;
        i.d(t, "a", (function() {
            return c
        }
        ));
        const l = {
            3: (e,t)=>{
                Object(a.d)(o.a).show(4, {
                    cbClose: t,
                    iFrameURL: e,
                    showImmediately: !0
                })
            }
            ,
            2: (e,t)=>{
                const i = Object(n.l)(e, Object.assign(Object.assign({}, {
                    name: "Cashier",
                    options: d()
                }), {
                    onCloseCallback: t
                }));
                window.focus && i.focus()
            }
        };
        let c = class {
            constructor() {
                this.dispatcher = Object(a.d)(r.a),
                this.hidden = !1 === Object(h.d)("cashier"),
                this.URL = Object(h.f)("cashier"),
                this.navigationMode = Object(h.k)("cashier_in_wrapper_popup") ? 3 : Object(h.d)("cashier_target_same_tab") ? 1 : 2,
                this.isSameTab = 1 === this.navigationMode,
                this._enabled = !!this.URL,
                this.openFn = l[this.navigationMode]
            }
            get enabled() {
                return this._enabled
            }
            open(e) {
                if (this.dispatcher.emit("CASHIER_BEFORE_OPEN", e),
                !this.openFn)
                    return;
                const {event: t, callback: i} = e;
                t && t.preventDefault(),
                this.openFn(this.URL, i)
            }
            setOpenCashierFn(e) {
                this.openFn = e,
                this._enabled = !0,
                this.dispatcher.emit("CASHIER_UPDATED")
            }
        }
        ;
        c = Object(s.a)([a.a], c)
    }
}]);
