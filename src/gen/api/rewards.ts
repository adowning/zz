/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tasks API
 * OpenAPI spec version: 0.0.0
 */
import type {
  GetApiRewardActivity200Item,
  GetApiRewardDashboard200,
  GetApiRewardStatus200,
  PostApiRewardConvert200,
  PostApiRewardConvertBody
} from '../models';

import { customFetch } from '../../request/index';


export type getApiRewardStatusResponse200 = {
  data: GetApiRewardStatus200
  status: 200
}
    
export type getApiRewardStatusResponseComposite = getApiRewardStatusResponse200;
    
export type getApiRewardStatusResponse = getApiRewardStatusResponseComposite & {
  headers: Headers;
}

export const getGetApiRewardStatusUrl = () => {


  

  return `/api/reward/status`
}

export const getApiRewardStatus = async ( options?: RequestInit): Promise<getApiRewardStatusResponse> => {
  
  return customFetch<getApiRewardStatusResponse>(getGetApiRewardStatusUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type postApiRewardGetLogResponse200 = {
  data: null
  status: 200
}
    
export type postApiRewardGetLogResponseComposite = postApiRewardGetLogResponse200;
    
export type postApiRewardGetLogResponse = postApiRewardGetLogResponseComposite & {
  headers: Headers;
}

export const getPostApiRewardGetLogUrl = () => {


  

  return `/api/reward/get-log`
}

export const postApiRewardGetLog = async ( options?: RequestInit): Promise<postApiRewardGetLogResponse> => {
  
  return customFetch<postApiRewardGetLogResponse>(getPostApiRewardGetLogUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type getApiRewardActivityResponse200 = {
  data: GetApiRewardActivity200Item[]
  status: 200
}
    
export type getApiRewardActivityResponseComposite = getApiRewardActivityResponse200;
    
export type getApiRewardActivityResponse = getApiRewardActivityResponseComposite & {
  headers: Headers;
}

export const getGetApiRewardActivityUrl = () => {


  

  return `/api/reward/activity`
}

export const getApiRewardActivity = async ( options?: RequestInit): Promise<getApiRewardActivityResponse> => {
  
  return customFetch<getApiRewardActivityResponse>(getGetApiRewardActivityUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type getApiRewardDashboardResponse200 = {
  data: GetApiRewardDashboard200
  status: 200
}
    
export type getApiRewardDashboardResponseComposite = getApiRewardDashboardResponse200;
    
export type getApiRewardDashboardResponse = getApiRewardDashboardResponseComposite & {
  headers: Headers;
}

export const getGetApiRewardDashboardUrl = () => {


  

  return `/api/reward/dashboard`
}

export const getApiRewardDashboard = async ( options?: RequestInit): Promise<getApiRewardDashboardResponse> => {
  
  return customFetch<getApiRewardDashboardResponse>(getGetApiRewardDashboardUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type postApiRewardConvertResponse200 = {
  data: PostApiRewardConvert200
  status: 200
}
    
export type postApiRewardConvertResponseComposite = postApiRewardConvertResponse200;
    
export type postApiRewardConvertResponse = postApiRewardConvertResponseComposite & {
  headers: Headers;
}

export const getPostApiRewardConvertUrl = () => {


  

  return `/api/reward/convert`
}

export const postApiRewardConvert = async (postApiRewardConvertBody: PostApiRewardConvertBody, options?: RequestInit): Promise<postApiRewardConvertResponse> => {
  
  return customFetch<postApiRewardConvertResponse>(getPostApiRewardConvertUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiRewardConvertBody,)
  }
);}


