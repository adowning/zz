/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tasks API
 * OpenAPI spec version: 1.0.0
 */
import type {
  PostApiPragmaticGs2cV3GameService200,
  PostApiPragmaticGs2cV3GameService500,
  PostApiPragmaticGs2cV3GameServiceBody
} from '../models';

import { customFetch } from '../../request/index';


/**
 * @summary Use pragmatic gameService
 */
export type postApiPragmaticGs2cV3GameServiceResponse200 = {
  data: PostApiPragmaticGs2cV3GameService200
  status: 200
}

export type postApiPragmaticGs2cV3GameServiceResponse500 = {
  data: PostApiPragmaticGs2cV3GameService500
  status: 500
}
    
export type postApiPragmaticGs2cV3GameServiceResponseComposite = postApiPragmaticGs2cV3GameServiceResponse200 | postApiPragmaticGs2cV3GameServiceResponse500;
    
export type postApiPragmaticGs2cV3GameServiceResponse = postApiPragmaticGs2cV3GameServiceResponseComposite & {
  headers: Headers;
}

export const getPostApiPragmaticGs2cV3GameServiceUrl = () => {


  

  return `/api/pragmatic/gs2c/v3/gameService`
}

export const postApiPragmaticGs2cV3GameService = async (postApiPragmaticGs2cV3GameServiceBody: PostApiPragmaticGs2cV3GameServiceBody, options?: RequestInit): Promise<postApiPragmaticGs2cV3GameServiceResponse> => {
  
  return customFetch<postApiPragmaticGs2cV3GameServiceResponse>(getPostApiPragmaticGs2cV3GameServiceUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiPragmaticGs2cV3GameServiceBody,)
  }
);}


