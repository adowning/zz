/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tasks API
 * OpenAPI spec version: 0.0.0
 */
import type {
  PostApiUpdatesUploadBody
} from '../models';

import { customFetch } from '../../request/index';


/**
 * @summary Upload a new application version (APK or OTA bundle)
 */
export type postApiUpdatesUploadResponse200 = {
  data: boolean
  status: 200
}

export type postApiUpdatesUploadResponse400 = {
  data: string
  status: 400
}
    
export type postApiUpdatesUploadResponseComposite = postApiUpdatesUploadResponse200 | postApiUpdatesUploadResponse400;
    
export type postApiUpdatesUploadResponse = postApiUpdatesUploadResponseComposite & {
  headers: Headers;
}

export const getPostApiUpdatesUploadUrl = () => {


  

  return `/api/updates/upload`
}

export const postApiUpdatesUpload = async (postApiUpdatesUploadBody: PostApiUpdatesUploadBody, options?: RequestInit): Promise<postApiUpdatesUploadResponse> => {
    const formData = new FormData();

  return customFetch<postApiUpdatesUploadResponse>(getPostApiUpdatesUploadUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}


/**
 * @summary Download an update file (for local development only)
 */
export type getApiUpdatesDownloadFilenameResponse200 = {
  data: null
  status: 200
}

export type getApiUpdatesDownloadFilenameResponse404 = {
  data: string
  status: 404
}
    
export type getApiUpdatesDownloadFilenameResponseComposite = getApiUpdatesDownloadFilenameResponse200 | getApiUpdatesDownloadFilenameResponse404;
    
export type getApiUpdatesDownloadFilenameResponse = getApiUpdatesDownloadFilenameResponseComposite & {
  headers: Headers;
}

export const getGetApiUpdatesDownloadFilenameUrl = (filename: string,) => {


  

  return `/api/updates/download/${filename}`
}

export const getApiUpdatesDownloadFilename = async (filename: string, options?: RequestInit): Promise<getApiUpdatesDownloadFilenameResponse> => {
  
  return customFetch<getApiUpdatesDownloadFilenameResponse>(getGetApiUpdatesDownloadFilenameUrl(filename),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary List all available versions for an app and platform
 */
export type getApiUpdatesVersionsAppIdPlatformResponse200 = {
  data: string[]
  status: 200
}

export type getApiUpdatesVersionsAppIdPlatformResponse400 = {
  data: string
  status: 400
}
    
export type getApiUpdatesVersionsAppIdPlatformResponseComposite = getApiUpdatesVersionsAppIdPlatformResponse200 | getApiUpdatesVersionsAppIdPlatformResponse400;
    
export type getApiUpdatesVersionsAppIdPlatformResponse = getApiUpdatesVersionsAppIdPlatformResponseComposite & {
  headers: Headers;
}

export const getGetApiUpdatesVersionsAppIdPlatformUrl = (appId: string,
    platform: string,) => {


  

  return `/api/updates/versions/${appId}/${platform}`
}

export const getApiUpdatesVersionsAppIdPlatform = async (appId: string,
    platform: string, options?: RequestInit): Promise<getApiUpdatesVersionsAppIdPlatformResponse> => {
  
  return customFetch<getApiUpdatesVersionsAppIdPlatformResponse>(getGetApiUpdatesVersionsAppIdPlatformUrl(appId,platform),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


