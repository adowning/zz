/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tasks API
 * OpenAPI spec version: 0.0.0
 */
import type {
  DeleteApiUsersId404,
  DeleteApiUsersId422,
  GetApiUserAmount200,
  GetApiUsers200Item,
  GetApiUsersId200,
  GetApiUsersId404,
  GetApiUsersId422,
  GetApiUsersIdCheck200,
  GetApiUsersIdCheck404,
  GetApiUsersIdInfo200,
  GetApiUsersIdInfo404,
  GetApiUsersIdVipinfo200,
  PatchApiUsersId200,
  PatchApiUsersId404,
  PatchApiUsersIdBody,
  PostApiEndGameSession200,
  PostApiUserChange200,
  PostApiUserChangeBody,
  PostApiUserEmail200,
  PostApiUserEmailBody,
  PostApiUserPassword200,
  PostApiUserPasswordBody,
  PostApiUserSuspend200,
  PostApiUserSuspendBody,
  PostApiUsersIdVerifyEmail200
} from '../models';

import { customFetch } from '../../request/index';


export type getApiUsersResponse200 = {
  data: GetApiUsers200Item[]
  status: 200
}
    
export type getApiUsersResponseComposite = getApiUsersResponse200;
    
export type getApiUsersResponse = getApiUsersResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersUrl = () => {


  

  return `/api/users`
}

export const getApiUsers = async ( options?: RequestInit): Promise<getApiUsersResponse> => {
  
  return customFetch<getApiUsersResponse>(getGetApiUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type postApiEnterGameResponse200 = {
  data: null
  status: 200
}
    
export type postApiEnterGameResponseComposite = postApiEnterGameResponse200;
    
export type postApiEnterGameResponse = postApiEnterGameResponseComposite & {
  headers: Headers;
}

export const getPostApiEnterGameUrl = () => {


  

  return `/api/enter/game`
}

export const postApiEnterGame = async ( options?: RequestInit): Promise<postApiEnterGameResponse> => {
  
  return customFetch<postApiEnterGameResponse>(getPostApiEnterGameUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type postApiGamesResponse200 = {
  data: null
  status: 200
}
    
export type postApiGamesResponseComposite = postApiGamesResponse200;
    
export type postApiGamesResponse = postApiGamesResponseComposite & {
  headers: Headers;
}

export const getPostApiGamesUrl = () => {


  

  return `/api/games`
}

export const postApiGames = async ( options?: RequestInit): Promise<postApiGamesResponse> => {
  
  return customFetch<postApiGamesResponse>(getPostApiGamesUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type postApiSetupGameResponse200 = {
  data: null
  status: 200
}
    
export type postApiSetupGameResponseComposite = postApiSetupGameResponse200;
    
export type postApiSetupGameResponse = postApiSetupGameResponseComposite & {
  headers: Headers;
}

export const getPostApiSetupGameUrl = () => {


  

  return `/api/setup/game`
}

export const postApiSetupGame = async ( options?: RequestInit): Promise<postApiSetupGameResponse> => {
  
  return customFetch<postApiSetupGameResponse>(getPostApiSetupGameUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type getApiSpinpageResponse200 = {
  data: null
  status: 200
}
    
export type getApiSpinpageResponseComposite = getApiSpinpageResponse200;
    
export type getApiSpinpageResponse = getApiSpinpageResponseComposite & {
  headers: Headers;
}

export const getGetApiSpinpageUrl = () => {


  

  return `/api/spinpage`
}

export const getApiSpinpage = async ( options?: RequestInit): Promise<getApiSpinpageResponse> => {
  
  return customFetch<getApiSpinpageResponse>(getGetApiSpinpageUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type postApiSpinResponse200 = {
  data: null
  status: 200
}
    
export type postApiSpinResponseComposite = postApiSpinResponse200;
    
export type postApiSpinResponse = postApiSpinResponseComposite & {
  headers: Headers;
}

export const getPostApiSpinUrl = () => {


  

  return `/api/spin`
}

export const postApiSpin = async ( options?: RequestInit): Promise<postApiSpinResponse> => {
  
  return customFetch<postApiSpinResponse>(getPostApiSpinUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type getApiFavoriteGameResponse200 = {
  data: null
  status: 200
}
    
export type getApiFavoriteGameResponseComposite = getApiFavoriteGameResponse200;
    
export type getApiFavoriteGameResponse = getApiFavoriteGameResponseComposite & {
  headers: Headers;
}

export const getGetApiFavoriteGameUrl = () => {


  

  return `/api/favorite/game`
}

export const getApiFavoriteGame = async ( options?: RequestInit): Promise<getApiFavoriteGameResponse> => {
  
  return customFetch<getApiFavoriteGameResponse>(getGetApiFavoriteGameUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary End the current game session
 */
export type postApiEndGameSessionResponse200 = {
  data: PostApiEndGameSession200
  status: 200
}

export type postApiEndGameSessionResponse401 = {
  data: null
  status: 401
}
    
export type postApiEndGameSessionResponseComposite = postApiEndGameSessionResponse200 | postApiEndGameSessionResponse401;
    
export type postApiEndGameSessionResponse = postApiEndGameSessionResponseComposite & {
  headers: Headers;
}

export const getPostApiEndGameSessionUrl = () => {


  

  return `/api/end-game-session`
}

export const postApiEndGameSession = async ( options?: RequestInit): Promise<postApiEndGameSessionResponse> => {
  
  return customFetch<postApiEndGameSessionResponse>(getPostApiEndGameSessionUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type getApiUsersIdResponse200 = {
  data: GetApiUsersId200
  status: 200
}

export type getApiUsersIdResponse404 = {
  data: GetApiUsersId404
  status: 404
}

export type getApiUsersIdResponse422 = {
  data: GetApiUsersId422
  status: 422
}
    
export type getApiUsersIdResponseComposite = getApiUsersIdResponse200 | getApiUsersIdResponse404 | getApiUsersIdResponse422;
    
export type getApiUsersIdResponse = getApiUsersIdResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersIdUrl = (id: number | null,) => {


  

  return `/api/users/${id}`
}

export const getApiUsersId = async (id: number | null, options?: RequestInit): Promise<getApiUsersIdResponse> => {
  
  return customFetch<getApiUsersIdResponse>(getGetApiUsersIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type patchApiUsersIdResponse200 = {
  data: PatchApiUsersId200
  status: 200
}

export type patchApiUsersIdResponse404 = {
  data: PatchApiUsersId404
  status: 404
}
    
export type patchApiUsersIdResponseComposite = patchApiUsersIdResponse200 | patchApiUsersIdResponse404;
    
export type patchApiUsersIdResponse = patchApiUsersIdResponseComposite & {
  headers: Headers;
}

export const getPatchApiUsersIdUrl = (id: number | null,) => {


  

  return `/api/users/${id}`
}

export const patchApiUsersId = async (id: number | null,
    patchApiUsersIdBody: PatchApiUsersIdBody, options?: RequestInit): Promise<patchApiUsersIdResponse> => {
  
  return customFetch<patchApiUsersIdResponse>(getPatchApiUsersIdUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchApiUsersIdBody,)
  }
);}


export type deleteApiUsersIdResponse204 = {
  data: null
  status: 204
}

export type deleteApiUsersIdResponse404 = {
  data: DeleteApiUsersId404
  status: 404
}

export type deleteApiUsersIdResponse422 = {
  data: DeleteApiUsersId422
  status: 422
}
    
export type deleteApiUsersIdResponseComposite = deleteApiUsersIdResponse204 | deleteApiUsersIdResponse404 | deleteApiUsersIdResponse422;
    
export type deleteApiUsersIdResponse = deleteApiUsersIdResponseComposite & {
  headers: Headers;
}

export const getDeleteApiUsersIdUrl = (id: number | null,) => {


  

  return `/api/users/${id}`
}

export const deleteApiUsersId = async (id: number | null, options?: RequestInit): Promise<deleteApiUsersIdResponse> => {
  
  return customFetch<deleteApiUsersIdResponse>(getDeleteApiUsersIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * @summary Check if a user exists
 */
export type getApiUsersIdCheckResponse200 = {
  data: GetApiUsersIdCheck200
  status: 200
}

export type getApiUsersIdCheckResponse404 = {
  data: GetApiUsersIdCheck404
  status: 404
}
    
export type getApiUsersIdCheckResponseComposite = getApiUsersIdCheckResponse200 | getApiUsersIdCheckResponse404;
    
export type getApiUsersIdCheckResponse = getApiUsersIdCheckResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersIdCheckUrl = (id: number | null,) => {


  

  return `/api/users/${id}/check`
}

export const getApiUsersIdCheck = async (id: number | null, options?: RequestInit): Promise<getApiUsersIdCheckResponse> => {
  
  return customFetch<getApiUsersIdCheckResponse>(getGetApiUsersIdCheckUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Send email verification
 */
export type postApiUsersIdVerifyEmailResponse200 = {
  data: PostApiUsersIdVerifyEmail200
  status: 200
}
    
export type postApiUsersIdVerifyEmailResponseComposite = postApiUsersIdVerifyEmailResponse200;
    
export type postApiUsersIdVerifyEmailResponse = postApiUsersIdVerifyEmailResponseComposite & {
  headers: Headers;
}

export const getPostApiUsersIdVerifyEmailUrl = (id: number | null,) => {


  

  return `/api/users/${id}/verify-email`
}

export const postApiUsersIdVerifyEmail = async (id: number | null, options?: RequestInit): Promise<postApiUsersIdVerifyEmailResponse> => {
  
  return customFetch<postApiUsersIdVerifyEmailResponse>(getPostApiUsersIdVerifyEmailUrl(id),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * @summary Get user info
 */
export type getApiUsersIdInfoResponse200 = {
  data: GetApiUsersIdInfo200
  status: 200
}

export type getApiUsersIdInfoResponse404 = {
  data: GetApiUsersIdInfo404
  status: 404
}
    
export type getApiUsersIdInfoResponseComposite = getApiUsersIdInfoResponse200 | getApiUsersIdInfoResponse404;
    
export type getApiUsersIdInfoResponse = getApiUsersIdInfoResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersIdInfoUrl = (id: number | null,) => {


  

  return `/api/users/${id}/info`
}

export const getApiUsersIdInfo = async (id: number | null, options?: RequestInit): Promise<getApiUsersIdInfoResponse> => {
  
  return customFetch<getApiUsersIdInfoResponse>(getGetApiUsersIdInfoUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Get user VIP info
 */
export type getApiUsersIdVipinfoResponse200 = {
  data: GetApiUsersIdVipinfo200
  status: 200
}
    
export type getApiUsersIdVipinfoResponseComposite = getApiUsersIdVipinfoResponse200;
    
export type getApiUsersIdVipinfoResponse = getApiUsersIdVipinfoResponseComposite & {
  headers: Headers;
}

export const getGetApiUsersIdVipinfoUrl = (id: number | null,) => {


  

  return `/api/users/${id}/vipinfo`
}

export const getApiUsersIdVipinfo = async (id: number | null, options?: RequestInit): Promise<getApiUsersIdVipinfoResponse> => {
  
  return customFetch<getApiUsersIdVipinfoResponse>(getGetApiUsersIdVipinfoUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type getApiUserAmountResponse200 = {
  data: GetApiUserAmount200
  status: 200
}
    
export type getApiUserAmountResponseComposite = getApiUserAmountResponse200;
    
export type getApiUserAmountResponse = getApiUserAmountResponseComposite & {
  headers: Headers;
}

export const getGetApiUserAmountUrl = () => {


  

  return `/api/user/amount`
}

export const getApiUserAmount = async ( options?: RequestInit): Promise<getApiUserAmountResponse> => {
  
  return customFetch<getApiUserAmountResponse>(getGetApiUserAmountUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type postApiUserChangeResponse200 = {
  data: PostApiUserChange200
  status: 200
}
    
export type postApiUserChangeResponseComposite = postApiUserChangeResponse200;
    
export type postApiUserChangeResponse = postApiUserChangeResponseComposite & {
  headers: Headers;
}

export const getPostApiUserChangeUrl = () => {


  

  return `/api/user/change`
}

export const postApiUserChange = async (postApiUserChangeBody: PostApiUserChangeBody, options?: RequestInit): Promise<postApiUserChangeResponse> => {
  
  return customFetch<postApiUserChangeResponse>(getPostApiUserChangeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiUserChangeBody,)
  }
);}


export type postApiUserEmailResponse200 = {
  data: PostApiUserEmail200
  status: 200
}
    
export type postApiUserEmailResponseComposite = postApiUserEmailResponse200;
    
export type postApiUserEmailResponse = postApiUserEmailResponseComposite & {
  headers: Headers;
}

export const getPostApiUserEmailUrl = () => {


  

  return `/api/user/email`
}

export const postApiUserEmail = async (postApiUserEmailBody: PostApiUserEmailBody, options?: RequestInit): Promise<postApiUserEmailResponse> => {
  
  return customFetch<postApiUserEmailResponse>(getPostApiUserEmailUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiUserEmailBody,)
  }
);}


export type postApiUserPasswordResponse200 = {
  data: PostApiUserPassword200
  status: 200
}
    
export type postApiUserPasswordResponseComposite = postApiUserPasswordResponse200;
    
export type postApiUserPasswordResponse = postApiUserPasswordResponseComposite & {
  headers: Headers;
}

export const getPostApiUserPasswordUrl = () => {


  

  return `/api/user/password`
}

export const postApiUserPassword = async (postApiUserPasswordBody: PostApiUserPasswordBody, options?: RequestInit): Promise<postApiUserPasswordResponse> => {
  
  return customFetch<postApiUserPasswordResponse>(getPostApiUserPasswordUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiUserPasswordBody,)
  }
);}


export type postApiUserSuspendResponse200 = {
  data: PostApiUserSuspend200
  status: 200
}
    
export type postApiUserSuspendResponseComposite = postApiUserSuspendResponse200;
    
export type postApiUserSuspendResponse = postApiUserSuspendResponseComposite & {
  headers: Headers;
}

export const getPostApiUserSuspendUrl = () => {


  

  return `/api/user/suspend`
}

export const postApiUserSuspend = async (postApiUserSuspendBody: PostApiUserSuspendBody, options?: RequestInit): Promise<postApiUserSuspendResponse> => {
  
  return customFetch<postApiUserSuspendResponse>(getPostApiUserSuspendUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiUserSuspendBody,)
  }
);}


