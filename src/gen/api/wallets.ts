/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tasks API
 * OpenAPI spec version: 0.0.0
 */
import type {
  GetApiWallets200,
  GetApiWallets404,
  GetApiWalletsHistory200,
  PostApiWalletsCashtag200,
  PostApiWalletsCashtag400,
  PostApiWalletsCashtag401,
  PostApiWalletsCashtagBody,
  PostApiWalletsSwitchOperator200,
  PostApiWalletsSwitchOperator400,
  PostApiWalletsSwitchOperator401,
  PostApiWalletsSwitchOperatorBody
} from '../models';

import { customFetch } from '../../request/index';


/**
 * @summary Get the active wallet for the authenticated user
 */
export type getApiWalletsResponse200 = {
  data: GetApiWallets200
  status: 200
}

export type getApiWalletsResponse404 = {
  data: GetApiWallets404
  status: 404
}
    
export type getApiWalletsResponseComposite = getApiWalletsResponse200 | getApiWalletsResponse404;
    
export type getApiWalletsResponse = getApiWalletsResponseComposite & {
  headers: Headers;
}

export const getGetApiWalletsUrl = () => {


  

  return `/api/wallets`
}

export const getApiWallets = async ( options?: RequestInit): Promise<getApiWalletsResponse> => {
  
  return customFetch<getApiWalletsResponse>(getGetApiWalletsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type postApiWalletsCashtagResponse200 = {
  data: PostApiWalletsCashtag200
  status: 200
}

export type postApiWalletsCashtagResponse400 = {
  data: PostApiWalletsCashtag400
  status: 400
}

export type postApiWalletsCashtagResponse401 = {
  data: PostApiWalletsCashtag401
  status: 401
}
    
export type postApiWalletsCashtagResponseComposite = postApiWalletsCashtagResponse200 | postApiWalletsCashtagResponse400 | postApiWalletsCashtagResponse401;
    
export type postApiWalletsCashtagResponse = postApiWalletsCashtagResponseComposite & {
  headers: Headers;
}

export const getPostApiWalletsCashtagUrl = () => {


  

  return `/api/wallets/cashtag`
}

export const postApiWalletsCashtag = async (postApiWalletsCashtagBody: PostApiWalletsCashtagBody, options?: RequestInit): Promise<postApiWalletsCashtagResponse> => {
  
  return customFetch<postApiWalletsCashtagResponse>(getPostApiWalletsCashtagUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiWalletsCashtagBody,)
  }
);}


/**
 * @summary List all wallets for the authenticated user
 */
export type getApiWalletsHistoryResponse200 = {
  data: GetApiWalletsHistory200
  status: 200
}
    
export type getApiWalletsHistoryResponseComposite = getApiWalletsHistoryResponse200;
    
export type getApiWalletsHistoryResponse = getApiWalletsHistoryResponseComposite & {
  headers: Headers;
}

export const getGetApiWalletsHistoryUrl = () => {


  

  return `/api/wallets/history`
}

export const getApiWalletsHistory = async ( options?: RequestInit): Promise<getApiWalletsHistoryResponse> => {
  
  return customFetch<getApiWalletsHistoryResponse>(getGetApiWalletsHistoryUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * @summary Switch the active wallet to the given operator, creating if needed
 */
export type postApiWalletsSwitchOperatorResponse200 = {
  data: PostApiWalletsSwitchOperator200
  status: 200
}

export type postApiWalletsSwitchOperatorResponse400 = {
  data: PostApiWalletsSwitchOperator400
  status: 400
}

export type postApiWalletsSwitchOperatorResponse401 = {
  data: PostApiWalletsSwitchOperator401
  status: 401
}
    
export type postApiWalletsSwitchOperatorResponseComposite = postApiWalletsSwitchOperatorResponse200 | postApiWalletsSwitchOperatorResponse400 | postApiWalletsSwitchOperatorResponse401;
    
export type postApiWalletsSwitchOperatorResponse = postApiWalletsSwitchOperatorResponseComposite & {
  headers: Headers;
}

export const getPostApiWalletsSwitchOperatorUrl = () => {


  

  return `/api/wallets/switch-operator`
}

export const postApiWalletsSwitchOperator = async (postApiWalletsSwitchOperatorBody: PostApiWalletsSwitchOperatorBody, options?: RequestInit): Promise<postApiWalletsSwitchOperatorResponse> => {
  
  return customFetch<postApiWalletsSwitchOperatorResponse>(getPostApiWalletsSwitchOperatorUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiWalletsSwitchOperatorBody,)
  }
);}


