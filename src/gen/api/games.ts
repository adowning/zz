/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tasks API
 * OpenAPI spec version: 0.0.0
 */
import type {
  GetApiGamesAll200Item,
  GetApiGamesAll400,
  GetApiGamesCheckSession200,
  GetApiGamesCheckSession400,
  GetApiGamesSearch200,
  GetApiGamesSearch400,
  GetApiGamesSearchParams,
  PostApiGamesIdEnter200,
  PostApiGamesIdEnter400,
  PostApiGamesIdEnter404
} from '../models';

import { customFetch } from '../../request/index';


export type getApiGamesAllResponse200 = {
  data: GetApiGamesAll200Item[]
  status: 200
}

export type getApiGamesAllResponse400 = {
  data: GetApiGamesAll400
  status: 400
}
    
export type getApiGamesAllResponseComposite = getApiGamesAllResponse200 | getApiGamesAllResponse400;
    
export type getApiGamesAllResponse = getApiGamesAllResponseComposite & {
  headers: Headers;
}

export const getGetApiGamesAllUrl = () => {


  

  return `/api/games/all`
}

export const getApiGamesAll = async ( options?: RequestInit): Promise<getApiGamesAllResponse> => {
  
  return customFetch<getApiGamesAllResponse>(getGetApiGamesAllUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type getApiGamesSearchResponse200 = {
  data: GetApiGamesSearch200
  status: 200
}

export type getApiGamesSearchResponse400 = {
  data: GetApiGamesSearch400
  status: 400
}
    
export type getApiGamesSearchResponseComposite = getApiGamesSearchResponse200 | getApiGamesSearchResponse400;
    
export type getApiGamesSearchResponse = getApiGamesSearchResponseComposite & {
  headers: Headers;
}

export const getGetApiGamesSearchUrl = (params?: GetApiGamesSearchParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/games/search?${stringifiedParams}` : `/api/games/search`
}

export const getApiGamesSearch = async (params?: GetApiGamesSearchParams, options?: RequestInit): Promise<getApiGamesSearchResponse> => {
  
  return customFetch<getApiGamesSearchResponse>(getGetApiGamesSearchUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


export type postApiGamesIdEnterResponse200 = {
  data: PostApiGamesIdEnter200
  status: 200
}

export type postApiGamesIdEnterResponse400 = {
  data: PostApiGamesIdEnter400
  status: 400
}

export type postApiGamesIdEnterResponse404 = {
  data: PostApiGamesIdEnter404
  status: 404
}
    
export type postApiGamesIdEnterResponseComposite = postApiGamesIdEnterResponse200 | postApiGamesIdEnterResponse400 | postApiGamesIdEnterResponse404;
    
export type postApiGamesIdEnterResponse = postApiGamesIdEnterResponseComposite & {
  headers: Headers;
}

export const getPostApiGamesIdEnterUrl = (id: string,) => {


  

  return `/api/games/${id}/enter`
}

export const postApiGamesIdEnter = async (id: string, options?: RequestInit): Promise<postApiGamesIdEnterResponse> => {
  
  return customFetch<postApiGamesIdEnterResponse>(getPostApiGamesIdEnterUrl(id),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type postApiGamesLeaveResponse200 = {
  data: null
  status: 200
}
    
export type postApiGamesLeaveResponseComposite = postApiGamesLeaveResponse200;
    
export type postApiGamesLeaveResponse = postApiGamesLeaveResponseComposite & {
  headers: Headers;
}

export const getPostApiGamesLeaveUrl = () => {


  

  return `/api/games/leave`
}

export const postApiGamesLeave = async ( options?: RequestInit): Promise<postApiGamesLeaveResponse> => {
  
  return customFetch<postApiGamesLeaveResponse>(getPostApiGamesLeaveUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


export type getApiGamesCheckSessionResponse200 = {
  data: GetApiGamesCheckSession200
  status: 200
}

export type getApiGamesCheckSessionResponse400 = {
  data: GetApiGamesCheckSession400
  status: 400
}
    
export type getApiGamesCheckSessionResponseComposite = getApiGamesCheckSessionResponse200 | getApiGamesCheckSessionResponse400;
    
export type getApiGamesCheckSessionResponse = getApiGamesCheckSessionResponseComposite & {
  headers: Headers;
}

export const getGetApiGamesCheckSessionUrl = () => {


  

  return `/api/games/check/session`
}

export const getApiGamesCheckSession = async ( options?: RequestInit): Promise<getApiGamesCheckSessionResponse> => {
  
  return customFetch<getApiGamesCheckSessionResponse>(getGetApiGamesCheckSessionUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


