/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tasks API
 * OpenAPI spec version: 0.0.0
 */
import type {
  GetApiAuthMe200,
  GetApiAuthMe401,
  PostApiAuthLogin200,
  PostApiAuthLogin400,
  PostApiAuthLoginBody,
  PostApiAuthLogout200,
  PostApiAuthLogout401,
  PostApiAuthOtp200,
  PostApiAuthOtp401,
  PostApiAuthOtpBody,
  PostApiAuthOtpVerify200,
  PostApiAuthOtpVerify401,
  PostApiAuthOtpVerifyBody,
  PostApiAuthRefresh200,
  PostApiAuthRefresh401,
  PostApiAuthSignup201,
  PostApiAuthSignup400,
  PostApiAuthSignupBody
} from '../models';

import { customFetch } from '../../request/index';


export type postApiAuthLoginResponse200 = {
  data: PostApiAuthLogin200
  status: 200
}

export type postApiAuthLoginResponse400 = {
  data: PostApiAuthLogin400
  status: 400
}
    
export type postApiAuthLoginResponseComposite = postApiAuthLoginResponse200 | postApiAuthLoginResponse400;
    
export type postApiAuthLoginResponse = postApiAuthLoginResponseComposite & {
  headers: Headers;
}

export const getPostApiAuthLoginUrl = () => {


  

  return `/api/auth/login`
}

export const postApiAuthLogin = async (postApiAuthLoginBody: PostApiAuthLoginBody, options?: RequestInit): Promise<postApiAuthLoginResponse> => {
  
  return customFetch<postApiAuthLoginResponse>(getPostApiAuthLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiAuthLoginBody,)
  }
);}


export type postApiAuthSignupResponse201 = {
  data: PostApiAuthSignup201
  status: 201
}

export type postApiAuthSignupResponse400 = {
  data: PostApiAuthSignup400
  status: 400
}
    
export type postApiAuthSignupResponseComposite = postApiAuthSignupResponse201 | postApiAuthSignupResponse400;
    
export type postApiAuthSignupResponse = postApiAuthSignupResponseComposite & {
  headers: Headers;
}

export const getPostApiAuthSignupUrl = () => {


  

  return `/api/auth/signup`
}

export const postApiAuthSignup = async (postApiAuthSignupBody: PostApiAuthSignupBody, options?: RequestInit): Promise<postApiAuthSignupResponse> => {
  
  return customFetch<postApiAuthSignupResponse>(getPostApiAuthSignupUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiAuthSignupBody,)
  }
);}


/**
 * @summary Mint a new access token using the refresh cookie
 */
export type postApiAuthRefreshResponse200 = {
  data: PostApiAuthRefresh200
  status: 200
}

export type postApiAuthRefreshResponse401 = {
  data: PostApiAuthRefresh401
  status: 401
}
    
export type postApiAuthRefreshResponseComposite = postApiAuthRefreshResponse200 | postApiAuthRefreshResponse401;
    
export type postApiAuthRefreshResponse = postApiAuthRefreshResponseComposite & {
  headers: Headers;
}

export const getPostApiAuthRefreshUrl = () => {


  

  return `/api/auth/refresh`
}

export const postApiAuthRefresh = async ( options?: RequestInit): Promise<postApiAuthRefreshResponse> => {
  
  return customFetch<postApiAuthRefreshResponse>(getPostApiAuthRefreshUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * @summary Initiate otp auth
 */
export type postApiAuthOtpResponse200 = {
  data: PostApiAuthOtp200
  status: 200
}

export type postApiAuthOtpResponse401 = {
  data: PostApiAuthOtp401
  status: 401
}
    
export type postApiAuthOtpResponseComposite = postApiAuthOtpResponse200 | postApiAuthOtpResponse401;
    
export type postApiAuthOtpResponse = postApiAuthOtpResponseComposite & {
  headers: Headers;
}

export const getPostApiAuthOtpUrl = () => {


  

  return `/api/auth/otp`
}

export const postApiAuthOtp = async (postApiAuthOtpBody: PostApiAuthOtpBody, options?: RequestInit): Promise<postApiAuthOtpResponse> => {
  
  return customFetch<postApiAuthOtpResponse>(getPostApiAuthOtpUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiAuthOtpBody,)
  }
);}


/**
 * @summary Return otp code received from server
 */
export type postApiAuthOtpVerifyResponse200 = {
  data: PostApiAuthOtpVerify200
  status: 200
}

export type postApiAuthOtpVerifyResponse401 = {
  data: PostApiAuthOtpVerify401
  status: 401
}
    
export type postApiAuthOtpVerifyResponseComposite = postApiAuthOtpVerifyResponse200 | postApiAuthOtpVerifyResponse401;
    
export type postApiAuthOtpVerifyResponse = postApiAuthOtpVerifyResponseComposite & {
  headers: Headers;
}

export const getPostApiAuthOtpVerifyUrl = () => {


  

  return `/api/auth/otp/verify`
}

export const postApiAuthOtpVerify = async (postApiAuthOtpVerifyBody: PostApiAuthOtpVerifyBody, options?: RequestInit): Promise<postApiAuthOtpVerifyResponse> => {
  
  return customFetch<postApiAuthOtpVerifyResponse>(getPostApiAuthOtpVerifyUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiAuthOtpVerifyBody,)
  }
);}


/**
 * @summary Logout current user
 */
export type postApiAuthLogoutResponse200 = {
  data: PostApiAuthLogout200
  status: 200
}

export type postApiAuthLogoutResponse401 = {
  data: PostApiAuthLogout401
  status: 401
}
    
export type postApiAuthLogoutResponseComposite = postApiAuthLogoutResponse200 | postApiAuthLogoutResponse401;
    
export type postApiAuthLogoutResponse = postApiAuthLogoutResponseComposite & {
  headers: Headers;
}

export const getPostApiAuthLogoutUrl = () => {


  

  return `/api/auth/logout`
}

export const postApiAuthLogout = async ( options?: RequestInit): Promise<postApiAuthLogoutResponse> => {
  
  return customFetch<postApiAuthLogoutResponse>(getPostApiAuthLogoutUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * @summary Get current user session
 */
export type getApiAuthMeResponse200 = {
  data: GetApiAuthMe200
  status: 200
}

export type getApiAuthMeResponse401 = {
  data: GetApiAuthMe401
  status: 401
}
    
export type getApiAuthMeResponseComposite = getApiAuthMeResponse200 | getApiAuthMeResponse401;
    
export type getApiAuthMeResponse = getApiAuthMeResponseComposite & {
  headers: Headers;
}

export const getGetApiAuthMeUrl = () => {


  

  return `/api/auth/me`
}

export const getApiAuthMe = async ( options?: RequestInit): Promise<getApiAuthMeResponse> => {
  
  return customFetch<getApiAuthMeResponse>(getGetApiAuthMeUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


