// Generated by Zero Schema Generator

import {
  boolean,
  createSchema,
  enumeration,
  json,
  number,
  relationships,
  string,
  table,
  type Row,
} from '@rocicorp/zero'

// Define enums

export enum GameProviderName {
  pragmaticplay = 'pragmaticplay',
  evoplay = 'evoplay',
  netent = 'netent',
  playngo = 'playngo',
  relaxgaming = 'relaxgaming',
  hacksaw = 'hacksaw',
  bgaming = 'bgaming',
  spribe = 'spribe',
  internal = 'internal',
  redtiger = 'redtiger',
  netgame = 'netgame',
  bigfishgames = 'bigfishgames',
  cqnine = 'cqnine',
  nolimit = 'nolimit',
  kickass = 'kickass',
}

export enum PaymentMethod {
  INSTORE_CASH = 'INSTORE_CASH',
  INSTORE_CARD = 'INSTORE_CARD',
  CASH_APP = 'CASH_APP',
}

export enum Permission {
  read = 'read',
  write = 'write',
  upload = 'upload',
  manage_users = 'manage_users',
  manage_settings = 'manage_settings',
  launch_game = 'launch_game',
}

export enum Status {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
  BANNED = 'BANNED',
}

export enum Role {
  USER = 'USER',
  ADMIN = 'ADMIN',
  VIP = 'VIP',
  MODERATOR = 'MODERATOR',
  SYSTEM = 'SYSTEM',
  OWNER = 'OWNER',
  MEMBER = 'MEMBER',
  OPERATOR = 'OPERATOR',
  SUPPORT_AGENT = 'SUPPORT_AGENT',
}

export enum TournamentStatus {
  PENDING = 'PENDING',
  ACTIVE = 'ACTIVE',
  COMPLETED = 'COMPLETED',
  CANCELLED = 'CANCELLED',
}

export enum TransactionStatus {
  PENDING = 'PENDING',
  PROCESSING = 'PROCESSING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
  CANCELLED = 'CANCELLED',
  REFUNDED = 'REFUNDED',
  EXPIRED = 'EXPIRED',
  REJECTED = 'REJECTED',
  REQUIRES_ACTION = 'REQUIRES_ACTION',
  ON_HOLD = 'ON_HOLD',
}

export enum TypeOfJackpot {
  MINOR = 'MINOR',
  MAJOR = 'MAJOR',
  GRAND = 'GRAND',
}

export enum TypeOfTransaction {
  DEPOSIT = 'DEPOSIT',
  WITHDRAWAL = 'WITHDRAWAL',
  BET = 'BET',
  WIN = 'WIN',
  TRANSFER_SENT = 'TRANSFER_SENT',
  TRANSFER_RECEIVED = 'TRANSFER_RECEIVED',
  SYSTEM_ADJUSTMENT_CREDIT = 'SYSTEM_ADJUSTMENT_CREDIT',
  SYSTEM_ADJUSTMENT_DEBIT = 'SYSTEM_ADJUSTMENT_DEBIT',
  TOURNAMENT_BUYIN = 'TOURNAMENT_BUYIN',
  TOURNAMENT_PRIZE = 'TOURNAMENT_PRIZE',
  AFFILIATE_COMMISSION = 'AFFILIATE_COMMISSION',
  REFUND = 'REFUND',
  FEE = 'FEE',
  BONUS_AWARD = 'BONUS_AWARD',
  BET_PLACE = 'BET_PLACE',
  BET_WIN = 'BET_WIN',
  BET_LOSE = 'BET_LOSE',
  BET_REFUND = 'BET_REFUND',
  BONUS_WAGER = 'BONUS_WAGER',
  BONUS_CONVERT = 'BONUS_CONVERT',
  BONUS_EXPIRED = 'BONUS_EXPIRED',
  XP_AWARD = 'XP_AWARD',
  ADJUSTMENT_ADD = 'ADJUSTMENT_ADD',
  ADJUSTMENT_SUB = 'ADJUSTMENT_SUB',
  INTERNAL_TRANSFER = 'INTERNAL_TRANSFER',
  PRODUCT_PURCHASE = 'PRODUCT_PURCHASE',
  REBATE_PAYOUT = 'REBATE_PAYOUT',
  JACKPOT_WIN = 'JACKPOT_WIN',
  JACKPOT_CONTRIBUTION = 'JACKPOT_CONTRIBUTION',
}

export enum UserRole {
  USER = 'USER',
  ADMIN = 'ADMIN',
  MODERATOR = 'MODERATOR',
  SUPPORT = 'SUPPORT',
  BOT = 'BOT',
  SYSTEM = 'SYSTEM',
}

export enum game_categories {
  slots = 'slots',
  fish = 'fish',
  table = 'table',
  live = 'live',
  poker = 'poker',
  lottery = 'lottery',
  virtual = 'virtual',
  other = 'other',
}

export enum message_type {
  update_wallet = 'update:wallet',
  update_vip = 'update:vip',
  update_balance = 'update:balance',
  update_gameSession = 'update:gameSession',
}

export enum session_status {
  ACTIVE = 'ACTIVE',
  COMPLETED = 'COMPLETED',
  EXPIRED = 'EXPIRED',
  ABANDONED = 'ABANDONED',
  TIMEOUT = 'TIMEOUT',
  OTP_PENDING = 'OTP_PENDING',
}

export enum update_type {
  BINARY = 'BINARY',
  OTA = 'OTA',
}

// Define tables

export const appVersionsTable = table('appVersions')
  .from('app_versions')
  .columns({
    id: number(),
    appId: string().from('app_id'),
    version: string(),
    platform: string(),
    updateType: string().from('update_type'),
    downloadUrl: string().from('download_url'),
    changelog: json<string[]>(),
    mandatory: boolean(),
    releaseDate: number().from('release_date'),
    fileSize: number().from('file_size'),
    checksum: string(),
  })
  .primaryKey('id')

export const authSessionsTable = table('authSessions')
  .from('auth_sessions')
  .columns({
    id: string(),
    userId: string().from('user_id'),
    status: enumeration<session_status>(),
    ipAddress: string().from('ip_address').optional(),
    userAgent: string().from('user_agent').optional(),
    deviceId: string().from('device_id').optional(),
    createdAt: number().from('created_at'),
    expiresAt: number().from('expires_at').optional(),
    lastSeen: number().from('last_seen'),
    otp: string().optional(),
  })
  .primaryKey('id')

export const blackjackBetsTable = table('blackjackBets')
  .from('blackjack_bets')
  .columns({
    id: string(),
    userId: string().from('user_id'),
    gameId: string().from('game_id'),
    seat: number(),
    amount: json(),
    cards: json().optional(),
    cardsLeft: json().from('cards_left').optional(),
    cardsRight: json().from('cards_right').optional(),
    actions: json().optional(),
    createdAt: number().from('created_at'),
  })
  .primaryKey('id')

export const blackjackGamesTable = table('blackjackGames')
  .from('blackjack_games')
  .columns({
    id: string(),
    table: number(),
    type: string(),
    state: string(),
    deck: json().optional(),
    dealerCards: json().from('dealer_cards').optional(),
    fair: json().optional(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
  })
  .primaryKey('id')

export const blackjackMessageTable = table('blackjackMessage')
  .from('blackjack_message')
  .columns({
    id: string(),
    event: string().optional(),
    requestId: string().from('request_id').optional(),
    payload: json().optional(),
    createdAt: number().from('created_at'),
  })
  .primaryKey('id')

export const depositsTable = table('deposits')
  .columns({
    id: string(),
    userId: string().from('user_id').optional(),
    amount: number().optional(),
    status: string().optional(),
    idNumber: string().from('id_number').optional(),
    firstName: string().from('first_name').optional(),
    lastName: string().from('last_name').optional(),
    channelsId: string().from('channels_id').optional(),
    note: string().optional(),
    currency: string().optional(),
    createdAt: number().from('created_at').optional(),
    updatedAt: number().from('updated_at').optional(),
  })
  .primaryKey('id')

export const gameSessionsTable = table('gameSessions')
  .from('game_sessions')
  .columns({
    id: string(),
    authSessionId: string().from('auth_session_id'),
    userId: string().from('user_id'),
    gameId: string().from('game_id').optional(),
    gameName: string().from('game_name').optional(),
    status: enumeration<session_status>(),
    totalWagered: number().from('total_wagered'),
    totalWon: number().from('total_won'),
    totalXpGained: number().from('total_xp_gained'),
    rtp: number().optional(),
    phpGameData: json().from('php_game_data').optional(),
    duration: number(),
    createdAt: number().from('created_at'),
    endAt: number().from('end_at').optional(),
    startingBalance: number().from('starting_balance'),
  })
  .primaryKey('id')

export const gameSpinsTable = table('gameSpins')
  .from('game_spins')
  .columns({
    id: string(),
    playerName: string().from('player_name').optional(),
    gameName: string().from('game_name').optional(),
    gameId: string().from('game_id').optional(),
    spinData: string().from('spin_data').optional(),
    grossWinAmount: number().from('gross_win_amount'),
    wagerAmount: number().from('wager_amount'),
    spinNumber: number().from('spin_number').optional(),
    playerAvatar: string().from('player_avatar').optional(),
    currencyId: string().from('currency_id').optional(),
    sessionId: string().from('session_id'),
    userId: string().from('user_id').optional(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
    occurredAt: number().from('occurred_at'),
    sessionDataId: string().optional(),
    type: string().optional(),
    operatorId: string().from('operator_id').optional(),
    status: string().optional(),
    playerBalanceAtStart: number().from('player_balance_at_start'),
    playerBalance: number().from('player_balance'),
    gamePlayerWinTotalTodayid: number().from('game_player_win_total_todayid'),
    playerBetTotalToday: number().from('player_bet_total_today'),
    sessionTotalWinAmount: number().from('session_total_win_amount'),
    sessionTotalBetAmount: number().from('session_total_bet_amount'),
    gameSessionRtp: number().from('game_session_rtp'),
    playerRtpToday: number().from('player_rtp_today'),
    winAmount: number().from('win_amount'),
    betAmount: number().from('bet_amount'),
  })
  .primaryKey('id')

export const gamesTable = table('games')
  .columns({
    id: string(),
    name: string(),
    title: string(),
    description: string().optional(),
    category: string(),
    tags: string(),
    thumbnailUrl: string().from('thumbnail_url').optional(),
    bannerUrl: string().from('banner_url').optional(),
    developer: string(),
    providerId: string().from('provider_id').optional(),
    totalWagered: number().from('total_wagered'),
    totalWon: number().from('total_won'),
    goldsvetData: json().from('goldsvet_data').optional(),
    targetRtp: number().from('target_rtp').optional(),
    isFeatured: boolean().from('is_featured'),
    isActive: boolean().from('is_active'),
    operatorId: string().from('operator_id').optional(),
    isHorizontal: boolean(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
    status: number(),
  })
  .primaryKey('id')

export const jackpotContributionsTable = table('jackpotContributions')
  .from('jackpot_contributions')
  .columns({
    id: string(),
    jackpotId: string().from('jackpot_id'),
    userId: string().from('user_id').optional(),
    gameSpinId: string().from('game_spin_id'),
    contributionAmountCoins: number().from('contribution_amount_coins'),
    createdAt: number().from('created_at'),
  })
  .primaryKey('id')

export const jackpotWinsTable = table('jackpotWins')
  .from('jackpot_wins')
  .columns({
    id: string(),
    jackpotId: string().from('jackpot_id'),
    winnerId: string().from('winner_id'),
    winAmountCoins: number().from('win_amount_coins'),
    gameSpinId: string().from('game_spin_id'),
    transactionId: string().from('transaction_id').optional(),
    createdAt: number().from('created_at'),
    sessionDataId: string().from('session_data_id').optional(),
  })
  .primaryKey('id')

export const jackpotsTable = table('jackpots')
  .columns({
    id: string(),
    type: string(),
    currentAmountCoins: number().from('current_amount_coins'),
    seedAmountCoins: number().from('seed_amount_coins'),
    minimumBetCoins: number().from('minimum_bet_coins'),
    contributionRateBasisPoints: number().from('contribution_rate_basis_points'),
    probabilityPerMillion: number().from('probability_per_million'),
    minimumTimeBetweenWinsMinutes: number().from('minimum_time_between_wins_minutes'),
    lastWonAt: number().from('last_won_at').optional(),
    lastWonBy: string().from('last_won_by').optional(),
    isActive: boolean().from('is_active'),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
  })
  .primaryKey('id')

export const operatorsTable = table('operators')
  .columns({
    id: string(),
    name: string(),
    operatorSecret: string().from('operator_secret'),
    operatorAccess: string().from('operator_access'),
    callbackUrl: string().from('callback_url'),
    isActive: boolean().from('is_active'),
    allowedIps: string().from('allowed_ips'),
    description: string().optional(),
    productIds: string().from('product_ids').optional(),
    balance: number(),
    netRevenue: number().from('net_revenue'),
    acceptedPayments: json<string[]>().from('accepted_payments'),
    ownerId: string().from('owner_id').optional(),
    lastUsedAt: number().from('last_used_at').optional(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
    goldsvetData: json().from('goldsvet_data').optional(),
  })
  .primaryKey('id')

export const operatorSwitchHistoryTable = table('operatorSwitchHistory')
  .from('operator_switch_history')
  .columns({
    id: string(),
    userId: string().from('user_id'),
    fromOperatorId: string().from('from_operator_id').optional(),
    toOperatorId: string().from('to_operator_id'),
    switchedAt: number().from('switched_at'),
  })
  .primaryKey('id')

export const productsTable = table('products')
  .columns({
    id: string(),
    title: string(),
    productType: string().from('product_type'),
    bonusTotalInCredits: number().from('bonus_total_in_credits'),
    isActive: boolean().from('is_active').optional(),
    priceInCents: number().from('price_in_cents'),
    amountToReceiveInCredits: number().from('amount_to_receive_in_credits'),
    bestValue: number().from('best_value'),
    discountInCents: number().from('discount_in_cents'),
    bonusSpins: number().from('bonus_spins'),
    isPromo: boolean().from('is_promo').optional(),
    totalDiscountInCents: number().from('total_discount_in_cents'),
    operatorId: string().from('operator_id').optional(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
  })
  .primaryKey('id')

export const transactionsTable = table('transactions')
  .columns({
    id: string(),
    processedAt: number().from('processed_at').optional(),
    walletId: string().from('wallet_id').optional(),
    type: string(),
    status: string(),
    amount: number(),
    netAmount: number().from('net_amount').optional(),
    currencyName: string().from('currency_name').optional(),
    feeAmount: number().from('fee_amount').optional(),
    productId: string().from('product_id').optional(),
    paymentMethod: string().from('payment_method').optional(),
    balanceBefore: number().from('balance_before').optional(),
    balanceAfter: number().from('balance_after').optional(),
    bonusBalanceBefore: number().from('bonus_balance_before').optional(),
    bonusBalanceAfter: number().from('bonus_balance_after').optional(),
    bonusAmount: number().from('bonus_amount').optional(),
    wageringRequirement: number().from('wagering_requirement').optional(),
    wageringProgress: number().from('wagering_progress').optional(),
    description: string().optional(),
    provider: string().optional(),
    providerTxId: string().from('provider_tx_id').optional(),
    relatedGameId: string().from('related_game_id').optional(),
    relatedRoundId: string().from('related_round_id').optional(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
    operatorId: string().from('operator_id').optional(),
    userId: string().from('user_id'),
  })
  .primaryKey('id')

export const usersTable = table('users')
  .columns({
    id: string(),
    username: string(),
    email: string().optional(),
    passwordHash: string().from('password_hash').optional(),
    accessToken: string().from('access_token').optional(),
    refreshToken: string().from('refresh_token').optional(),
    accessTokenExpiresAt: number().from('access_token_expires_at').optional(),
    refreshTokenExpiresAt: number().from('refresh_token_expires_at').optional(),
    currentGameSessionDataId: string().from('current_game_session_data_id').optional(),
    currentAuthSessionDataId: string().from('current_auth_session_data_id').optional(),
    avatarUrl: string().from('avatar_url').optional(),
    role: string(),
    isActive: boolean().from('is_active'),
    lastLoginAt: number().from('last_login_at').optional(),
    totalXpGained: number().from('total_xp_gained'),
    vipInfoId: string().from('vip_info_id').optional(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
    deletedAt: number().from('deleted_at').optional(),
    lastSeen: number().from('last_seen').optional(),
    rtgBlockTime: number().from('rtg_block_time'),
    phone: string().optional(),
    path: json<string[]>(),
    invitorId: string().from('invitor_id').optional(),
    avatar: string(),
    status: enumeration<Status>(),
    activeWalletId: string().from('active_wallet_id').optional(),
    activeOperatorId: string().optional(),
    inviteCode: string().optional(),
  })
  .primaryKey('id')

export const referralCodeTable = table('referralCodes')
  .from('referral_codes')
  .columns({
    id: string(),
    code: string(),
    name: string().optional(),
    commissionRate: number(),
    createdAt: number(),
    updatedAt: number(),
    userId: string(),
  })
  .primaryKey('id')

export const vipRankTable = table('vipRanks')
  .from('vip_ranks')
  .columns({
    id: number(),
    name: string(),
    minXp: number(),
    dailyBonusCoinPct: number(),
    hourlyBonusCoinPct: number(),
    purchaseBonusCoinPct: number(),
    levelUpBonusCoinPct: number(),
    hasConcierge: boolean(),
    hasVipLoungeAccess: boolean(),
    isInvitationOnly: boolean(),
  })
  .primaryKey('id')

export const vipInfoTable = table('vipInfo')
  .from('vip_info')
  .columns({
    id: string(),
    level: number(),
    xp: number(),
    totalXp: number(),
    userId: string(),
    currentRankid: number().optional(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
  })
  .primaryKey('id')

export const vipLevelUpHistoryTable = table('vipLevelUpHistory')
  .from('vip_level_up_history')
  .columns({
    id: string(),
    previousLevel: number().from('previous_level'),
    newLevel: number().from('new_level'),
    timestamp: number(),
    VipInfoId: string().from('VipInfo_id'),
  })
  .primaryKey('id')

export const walletsTable = table('wallets')
  .columns({
    id: string(),
    balance: number(),
    paymentMethod: string().from('payment_method'),
    currency: string(),
    address: string().optional(),
    cashtag: string().optional(),
    operatorId: string().from('operator_id'),
    lastUsedAt: number().from('last_used_at').optional(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
    userId: string().from('user_id'),
  })
  .primaryKey('id')

export const withdrawalsTable = table('withdrawals')
  .columns({
    id: string(),
    userId: string().from('user_id').optional(),
    amount: number().optional(),
    status: string().optional(),
    idNumber: string().from('id_number').optional(),
    firstName: string().from('first_name').optional(),
    lastName: string().from('last_name').optional(),
    channelsId: string().from('channels_id').optional(),
    note: string().optional(),
    currencyType: string().from('currency_type').optional(),
    currency: string().optional(),
    createdAt: number().from('created_at').optional(),
    updatedAt: number().from('updated_at').optional(),
  })
  .primaryKey('id')

export const vipTiersTable = table('vipTiers')
  .from('vip_tiers')
  .columns({
    id: string(),
    tiersName: string().from('tiers_name'),
    icon: string(),
    order: number(),
    weeklyCashback: boolean().from('weekly_cashback'),
    weeklyCashbackMin: number().from('weekly_cashback_min'),
    weeklyCashbackPercent: number().from('weekly_cashback_percent'),
    monthlyCashback: boolean().from('monthly_cashback'),
    monthlyCashbackMin: number().from('monthly_cashback_min'),
    monthlyCashbackPercent: number().from('monthly_cashback_percent'),
    levelUpBonus: number().from('level_up_bonus'),
    noFeeWithdrawal: boolean().from('no_fee_withdrawal'),
  })
  .primaryKey('id')

export const vipLevelTable = table('vipLevels')
  .from('vip_levels')
  .columns({
    id: string(),
    parentId: string().from('parent_id'),
    levelName: string().from('level_name'),
    xp: number(),
    settingId: number(),
  })
  .primaryKey('id')

export const vipCashbackTable = table('vipCashback')
  .from('vip_cashback')
  .columns({
    id: string(),
    userId: string().from('user_id'),
    amount: number(),
    currency: string(),
    tiersName: string().from('tiers_name'),
    type: string(),
    createdAt: number().from('created_at'),
  })
  .primaryKey('id')

export const vipLevelUpBonusTable = table('vipLevelUpBonus')
  .from('vip_level_up_bonus')
  .columns({
    id: string(),
    userId: string().from('user_id'),
    amount: number(),
    levelName: string().from('level_name'),
    levelXp: number().from('level_xp'),
    createdAt: number().from('created_at'),
  })
  .primaryKey('id')

export const vipSpinPrizeTable = table('vipSpinPrizes')
  .from('vip_spin_prizes')
  .columns({
    id: string(),
    tiersId: string().from('tiers_id'),
    prizes: json(),
  })
  .primaryKey('id')

export const vipSpinRewardTable = table('vipSpinRewards')
  .from('vip_spin_rewards')
  .columns({
    id: string(),
    userId: string().from('user_id'),
    amount: number(),
    currency: string(),
    createdAt: number().from('created_at'),
  })
  .primaryKey('id')

export const affiliateTable = table('affiliates')
  .columns({
    id: string(),
    username: string(),
    firstName: string().from('first_name'),
    lastName: string().from('last_name'),
    status: string(),
    email: string(),
    role: string(),
    referralCode: string().from('referral_code'),
    parentId: string().from('parent_id').optional(),
    path: json<string[]>(),
    password: string(),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
  })
  .primaryKey('id')

export const affiliateLogTable = table('affiliateLogs')
  .from('affiliate_logs')
  .columns({
    id: string(),
    invitorId: string().from('invitor_id'),
    childId: string().from('child_id'),
    currency: string(),
    referralCode: string().from('referral_code'),
    betAmount: number().from('bet_amount'),
    commissionAmount: number().from('commission_amount'),
    commissionWager: number().from('commission_wager'),
    totalReferralAmount: number().from('total_referral_amount'),
    referralAmount: number().from('referral_amount'),
    referralWager: number().from('referral_wager'),
    lastVipLevelAmount: number().from('last_vip_level_amount'),
    createdAt: number().from('created_at'),
    updatedAt: number().from('updated_at'),
  })
  .primaryKey('id')

export const settingTable = table('settings')
  .columns({
    id: number(),
    name: string(),
    referralCodeCount: number(),
    referralCommissionRate: number(),
    rates: json(),
    createdAt: number(),
    updatedAt: number(),
  })
  .primaryKey('id')

export const commissionTable = table('commissions')
  .columns({
    id: number(),
    master: number(),
    affiliate: number(),
    subAffiliate: number(),
    settingId: number(),
  })
  .primaryKey('id')

export const currencyTable = table('currency')
  .from('Currency')
  .columns({
    id: string(),
  })
  .primaryKey('id')

export const balanceTable = table('balances')
  .columns({
    id: number(),
    amount: number(),
    pending: number(),
    bonus: number(),
    withdrawable: number(),
    turnover: number(),
    createdAt: number(),
    updatedAt: number(),
    userId: string(),
    currencyId: string(),
  })
  .primaryKey('id')

// Define relationships

export const authSessionsTableRelationships = relationships(authSessionsTable, ({ one, many }) => ({
  users: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
  gameSessions: many({
    sourceField: ['id'],
    destField: ['authSessionId'],
    destSchema: gameSessionsTable,
  }),
}))

export const blackjackBetsTableRelationships = relationships(blackjackBetsTable, ({ one }) => ({
  blackjackGames: one({
    sourceField: ['gameId'],
    destField: ['id'],
    destSchema: blackjackGamesTable,
  }),
  users: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const blackjackGamesTableRelationships = relationships(blackjackGamesTable, ({ many }) => ({
  blackjackBets: many({
    sourceField: ['id'],
    destField: ['gameId'],
    destSchema: blackjackBetsTable,
  }),
}))

export const depositsTableRelationships = relationships(depositsTable, ({ one }) => ({
  users: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const gameSessionsTableRelationships = relationships(gameSessionsTable, ({ one }) => ({
  authSessions: one({
    sourceField: ['authSessionId'],
    destField: ['id'],
    destSchema: authSessionsTable,
  }),
  users: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const gameSpinsTableRelationships = relationships(gameSpinsTable, ({ one, many }) => ({
  jackpotContributions: many({
    sourceField: ['id'],
    destField: ['gameSpinId'],
    destSchema: jackpotContributionsTable,
  }),
  jackpotWins: one({
    sourceField: ['id'],
    destField: ['gameSpinId'],
    destSchema: jackpotWinsTable,
  }),
}))

export const gamesTableRelationships = relationships(gamesTable, ({ one }) => ({
  operators: one({
    sourceField: ['operatorId'],
    destField: ['id'],
    destSchema: operatorsTable,
  }),
}))

export const jackpotContributionsTableRelationships = relationships(jackpotContributionsTable, ({ one }) => ({
  gameSpins: one({
    sourceField: ['gameSpinId'],
    destField: ['id'],
    destSchema: gameSpinsTable,
  }),
  jackpots: one({
    sourceField: ['jackpotId'],
    destField: ['id'],
    destSchema: jackpotsTable,
  }),
}))

export const jackpotWinsTableRelationships = relationships(jackpotWinsTable, ({ one }) => ({
  gameSpins: one({
    sourceField: ['gameSpinId'],
    destField: ['id'],
    destSchema: gameSpinsTable,
  }),
  jackpots: one({
    sourceField: ['jackpotId'],
    destField: ['id'],
    destSchema: jackpotsTable,
  }),
  user: one({
    sourceField: ['winnerId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const jackpotsTableRelationships = relationships(jackpotsTable, ({ many }) => ({
  jackpotContributions: many({
    sourceField: ['id'],
    destField: ['jackpotId'],
    destSchema: jackpotContributionsTable,
  }),
  jackpotWins: many({
    sourceField: ['id'],
    destField: ['jackpotId'],
    destSchema: jackpotWinsTable,
  }),
}))

export const operatorsTableRelationships = relationships(operatorsTable, ({ many }) => ({
  games: many({
    sourceField: ['id'],
    destField: ['operatorId'],
    destSchema: gamesTable,
  }),
  products: many({
    sourceField: ['id'],
    destField: ['operatorId'],
    destSchema: productsTable,
  }),
  users: many({
    sourceField: ['id'],
    destField: ['activeOperatorId'],
    destSchema: usersTable,
  }),
  switchedFromHistory: many({
    sourceField: ['id'],
    destField: ['fromOperatorId'],
    destSchema: operatorSwitchHistoryTable,
  }),
  switchedToHistory: many({
    sourceField: ['id'],
    destField: ['toOperatorId'],
    destSchema: operatorSwitchHistoryTable,
  }),
  Wallets: many({
    sourceField: ['id'],
    destField: ['operatorId'],
    destSchema: walletsTable,
  }),
}))

export const operatorSwitchHistoryTableRelationships = relationships(operatorSwitchHistoryTable, ({ one }) => ({
  user: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
  fromOperator: one({
    sourceField: ['fromOperatorId'],
    destField: ['id'],
    destSchema: operatorsTable,
  }),
  toOperator: one({
    sourceField: ['toOperatorId'],
    destField: ['id'],
    destSchema: operatorsTable,
  }),
}))

export const productsTableRelationships = relationships(productsTable, ({ one, many }) => ({
  operators: one({
    sourceField: ['operatorId'],
    destField: ['id'],
    destSchema: operatorsTable,
  }),
  transactions: many({
    sourceField: ['id'],
    destField: ['productId'],
    destSchema: transactionsTable,
  }),
}))

export const transactionsTableRelationships = relationships(transactionsTable, ({ one }) => ({
  products: one({
    sourceField: ['productId'],
    destField: ['id'],
    destSchema: productsTable,
  }),
  wallets: one({
    sourceField: ['walletId'],
    destField: ['id'],
    destSchema: walletsTable,
  }),
}))

export const usersTableRelationships = relationships(usersTable, ({ one, many }) => ({
  authSessions: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: authSessionsTable,
  }),
  blackjackBets: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: blackjackBetsTable,
  }),
  deposits: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: depositsTable,
  }),
  gameSessions: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: gameSessionsTable,
  }),
  jackpotWins: many({
    sourceField: ['id'],
    destField: ['winnerId'],
    destSchema: jackpotWinsTable,
  }),
  activeWallet: one({
    sourceField: ['activeWalletId'],
    destField: ['id'],
    destSchema: walletsTable,
  }),
  wallets: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: walletsTable,
  }),
  vipInfo: one({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: vipInfoTable,
  }),
  withdrawals: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: withdrawalsTable,
  }),
  ops: one({
    sourceField: ['activeOperatorId'],
    destField: ['id'],
    destSchema: operatorsTable,
  }),
  operatorSwitchHistory: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: operatorSwitchHistoryTable,
  }),
  vipCashbacks: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: vipCashbackTable,
  }),
  vipLevelUpBonuses: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: vipLevelUpBonusTable,
  }),
  vipSpinRewards: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: vipSpinRewardTable,
  }),
  affiliateLogsInvited: many({
    sourceField: ['id'],
    destField: ['invitorId'],
    destSchema: affiliateLogTable,
  }),
  affiliateLogsReferred: many({
    sourceField: ['id'],
    destField: ['childId'],
    destSchema: affiliateLogTable,
  }),
  referralCodes: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: referralCodeTable,
  }),
  balances: many({
    sourceField: ['id'],
    destField: ['userId'],
    destSchema: balanceTable,
  }),
}))

export const referralCodeTableRelationships = relationships(referralCodeTable, ({ one }) => ({
  user: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const vipRankTableRelationships = relationships(vipRankTable, ({ many }) => ({
  VipInfo: many({
    sourceField: ['id'],
    destField: ['currentRankid'],
    destSchema: vipInfoTable,
  }),
}))

export const vipInfoTableRelationships = relationships(vipInfoTable, ({ one, many }) => ({
  vipRank: one({
    sourceField: ['currentRankid'],
    destField: ['id'],
    destSchema: vipRankTable,
  }),
  users: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
  vipLevelUpHistory: many({
    sourceField: ['id'],
    destField: ['VipInfoId'],
    destSchema: vipLevelUpHistoryTable,
  }),
}))

export const vipLevelUpHistoryTableRelationships = relationships(vipLevelUpHistoryTable, ({ one }) => ({
  VipInfo: one({
    sourceField: ['VipInfoId'],
    destField: ['id'],
    destSchema: vipInfoTable,
  }),
}))

export const walletsTableRelationships = relationships(walletsTable, ({ one, many }) => ({
  operator: one({
    sourceField: ['operatorId'],
    destField: ['id'],
    destSchema: operatorsTable,
  }),
  transactions: many({
    sourceField: ['id'],
    destField: ['walletId'],
    destSchema: transactionsTable,
  }),
  user: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
  activeForUser: one({
    sourceField: ['id'],
    destField: ['activeWalletId'],
    destSchema: usersTable,
  }),
}))

export const withdrawalsTableRelationships = relationships(withdrawalsTable, ({ one }) => ({
  users: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const vipTiersTableRelationships = relationships(vipTiersTable, ({ many }) => ({
  levels: many({
    sourceField: ['id'],
    destField: ['parentId'],
    destSchema: vipLevelTable,
  }),
  spinPrizes: many({
    sourceField: ['id'],
    destField: ['tiersId'],
    destSchema: vipSpinPrizeTable,
  }),
}))

export const vipLevelTableRelationships = relationships(vipLevelTable, ({ one }) => ({
  parent: one({
    sourceField: ['parentId'],
    destField: ['id'],
    destSchema: vipTiersTable,
  }),
  setting: one({
    sourceField: ['settingId'],
    destField: ['id'],
    destSchema: settingTable,
  }),
}))

export const vipCashbackTableRelationships = relationships(vipCashbackTable, ({ one }) => ({
  user: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const vipLevelUpBonusTableRelationships = relationships(vipLevelUpBonusTable, ({ one }) => ({
  user: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const vipSpinPrizeTableRelationships = relationships(vipSpinPrizeTable, ({ one }) => ({
  tiers: one({
    sourceField: ['tiersId'],
    destField: ['id'],
    destSchema: vipTiersTable,
  }),
}))

export const vipSpinRewardTableRelationships = relationships(vipSpinRewardTable, ({ one }) => ({
  user: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const affiliateTableRelationships = relationships(affiliateTable, ({ one, many }) => ({
  parent: one({
    sourceField: ['parentId'],
    destField: ['id'],
    destSchema: affiliateTable,
  }),
  children: many({
    sourceField: ['id'],
    destField: ['parentId'],
    destSchema: affiliateTable,
  }),
}))

export const affiliateLogTableRelationships = relationships(affiliateLogTable, ({ one }) => ({
  invitor: one({
    sourceField: ['invitorId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
  child: one({
    sourceField: ['childId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
}))

export const settingTableRelationships = relationships(settingTable, ({ one, many }) => ({
  vipLevels: many({
    sourceField: ['id'],
    destField: ['settingId'],
    destSchema: vipLevelTable,
  }),
  commission: one({
    sourceField: ['id'],
    destField: ['settingId'],
    destSchema: commissionTable,
  }),
}))

export const commissionTableRelationships = relationships(commissionTable, ({ one }) => ({
  setting: one({
    sourceField: ['settingId'],
    destField: ['id'],
    destSchema: settingTable,
  }),
}))

export const currencyTableRelationships = relationships(currencyTable, ({ many }) => ({
  balances: many({
    sourceField: ['id'],
    destField: ['currencyId'],
    destSchema: balanceTable,
  }),
}))

export const balanceTableRelationships = relationships(balanceTable, ({ one }) => ({
  user: one({
    sourceField: ['userId'],
    destField: ['id'],
    destSchema: usersTable,
  }),
  currency: one({
    sourceField: ['currencyId'],
    destField: ['id'],
    destSchema: currencyTable,
  }),
}))

// Define schema

export const schema = createSchema({
  tables: [
    appVersionsTable,
    authSessionsTable,
    blackjackBetsTable,
    blackjackGamesTable,
    blackjackMessageTable,
    depositsTable,
    gameSessionsTable,
    gameSpinsTable,
    gamesTable,
    jackpotContributionsTable,
    jackpotWinsTable,
    jackpotsTable,
    operatorsTable,
    operatorSwitchHistoryTable,
    productsTable,
    transactionsTable,
    usersTable,
    referralCodeTable,
    vipRankTable,
    vipInfoTable,
    vipLevelUpHistoryTable,
    walletsTable,
    withdrawalsTable,
    vipTiersTable,
    vipLevelTable,
    vipCashbackTable,
    vipLevelUpBonusTable,
    vipSpinPrizeTable,
    vipSpinRewardTable,
    affiliateTable,
    affiliateLogTable,
    settingTable,
    commissionTable,
    currencyTable,
    balanceTable,
  ],
  relationships: [
    authSessionsTableRelationships,
    blackjackBetsTableRelationships,
    blackjackGamesTableRelationships,
    depositsTableRelationships,
    gameSessionsTableRelationships,
    gameSpinsTableRelationships,
    gamesTableRelationships,
    jackpotContributionsTableRelationships,
    jackpotWinsTableRelationships,
    jackpotsTableRelationships,
    operatorsTableRelationships,
    operatorSwitchHistoryTableRelationships,
    productsTableRelationships,
    transactionsTableRelationships,
    usersTableRelationships,
    referralCodeTableRelationships,
    vipRankTableRelationships,
    vipInfoTableRelationships,
    vipLevelUpHistoryTableRelationships,
    walletsTableRelationships,
    withdrawalsTableRelationships,
    vipTiersTableRelationships,
    vipLevelTableRelationships,
    vipCashbackTableRelationships,
    vipLevelUpBonusTableRelationships,
    vipSpinPrizeTableRelationships,
    vipSpinRewardTableRelationships,
    affiliateTableRelationships,
    affiliateLogTableRelationships,
    settingTableRelationships,
    commissionTableRelationships,
    currencyTableRelationships,
    balanceTableRelationships,
  ],
})

// Define types
export type Schema = typeof schema
export type AppVersions = Row<typeof schema.tables.appVersions>
export type AuthSessions = Row<typeof schema.tables.authSessions>
export type BlackjackBets = Row<typeof schema.tables.blackjackBets>
export type BlackjackGames = Row<typeof schema.tables.blackjackGames>
export type BlackjackMessage = Row<typeof schema.tables.blackjackMessage>
export type Deposits = Row<typeof schema.tables.deposits>
export type GameSessions = Row<typeof schema.tables.gameSessions>
export type GameSpins = Row<typeof schema.tables.gameSpins>
export type Games = Row<typeof schema.tables.games>
export type JackpotContributions = Row<typeof schema.tables.jackpotContributions>
export type JackpotWins = Row<typeof schema.tables.jackpotWins>
export type Jackpots = Row<typeof schema.tables.jackpots>
export type Operators = Row<typeof schema.tables.operators>
export type OperatorSwitchHistory = Row<typeof schema.tables.operatorSwitchHistory>
export type Products = Row<typeof schema.tables.products>
export type Transactions = Row<typeof schema.tables.transactions>
export type Users = Row<typeof schema.tables.users>
export type ReferralCode = Row<typeof schema.tables.referralCodes>
export type VipRank = Row<typeof schema.tables.vipRanks>
export type VipInfo = Row<typeof schema.tables.vipInfo>
export type VipLevelUpHistory = Row<typeof schema.tables.vipLevelUpHistory>
export type Wallets = Row<typeof schema.tables.wallets>
export type Withdrawals = Row<typeof schema.tables.withdrawals>
export type VipTiers = Row<typeof schema.tables.vipTiers>
export type VipLevel = Row<typeof schema.tables.vipLevels>
export type VipCashback = Row<typeof schema.tables.vipCashback>
export type VipLevelUpBonus = Row<typeof schema.tables.vipLevelUpBonus>
export type VipSpinPrize = Row<typeof schema.tables.vipSpinPrizes>
export type VipSpinReward = Row<typeof schema.tables.vipSpinRewards>
export type Affiliate = Row<typeof schema.tables.affiliates>
export type AffiliateLog = Row<typeof schema.tables.affiliateLogs>
export type Setting = Row<typeof schema.tables.settings>
export type Commission = Row<typeof schema.tables.commissions>
export type Currency = Row<typeof schema.tables.currency>
export type Balance = Row<typeof schema.tables.balances>
